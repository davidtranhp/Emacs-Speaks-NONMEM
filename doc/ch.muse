#title Code Highlighting

* Overview
Code highlighting is a standard feature of many development
platforms.  Highlighting implements context sensitive highlighting, and extended
variable highlighting. 

* Options
Now Emacs Speaks NONMEM does code highlighting based on the version of NONMEM
that the author is assumed to be using.  

With NONMEM 7, the following code is highlighted as follows:

<lisp>
(setq tmp esn-assumed-version)
(setq esn-assumed-version "7")
""
</lisp>

<src lang="esn">
$PROBLEM NONMEM 7
$ESTIMATION METHOD=ITS
$INFN 
</src>

<lisp>
(setq esn-assumed-version "6")
""
</lisp>

However, in NONMEM 6, the =ITS= is not a valid method.  Therefore, it is not
highlighted when EsN believes you are using NONMEM 6:

<src lang="esn">
$PROBLEM NONMEM 6
$ESTIMATION METHOD=ITS
$INFN 
</src>

<lisp>
(setq esn-assumed-version "5")
""
</lisp>

When using NONMEM 5, not only is =ITS= an undefined option, but the =$INFN=
record is undefined.  This is highlighted as: 

<src lang="esn">
$PROBLEM NONMEM 5
$ESTIMATION METHOD=ITS
$INFN 
</src>

** Adaptive font lock

With Emacs Speaks NONMEM, code highlighting may be
implemented with context sensitivity or context insensitivity.

When conxtext sensitive, or adaptive font lock, is selected the options are
highlighted based on the record selected:

<lisp>
(setq esn-assumed-version tmp)
(setq tmp esn-adaptive-font-lock)
(setq esn-adaptive-font-lock 't)
""
</lisp>

<src lang="esn">
$INPUT ADVAN=
$SUBROUTINES ADVAN=
</src>

<lisp>
;(setq esn-adaptive-font-lock nil) ; Somethings wrong here.
""
</lisp>

However, with the adaptive font lock turned off, 

<src lang="esn">
$INPUT ADVAN=
$SUBROUTINES ADVAN=
</src>

<lisp>
(setq esn-adaptive-font-lock tmp)
""
</lisp>

** Highlight unknown records

When enabled, EsN highlights unknown records (based on NONMEM version selected).

With highlighting of unknown records enabled:

<lisp>
(setq tmp esn-highlight-unknown-records)
(setq esn-highlight-unknown-records 't)
""
</lisp>

<src lang="esn">
$ESTIMATION 
$UNKNOWN
</src>

<lisp>
(setq esn-highlight-unknown-records nil)
""
</lisp>

With highlighting of unknown records disabled:

<src lang="esn">
$ESTIMATION 
$UNKNOWN
</src>

<lisp>
(setq esn-highlight-unknown-records tmp)
""
</lisp>


** Highlight Known Option Values
When enabled, EsN highlights known option values (Based on NONMEM version selected)

With highlighting of known option values enabled:

<lisp>
(setq tmp esn-highlight-known-option-values)
(setq esn-highlight-known-option-values 't)
""
</lisp>

<src lang="esn">
$ESTIMATION METHOD=COND INTER
</src>

<lisp>
(setq esn-highlight-known-option-values nil)
""
</lisp>

With highlighting of known option values disabled:

<src lang="esn">
$ESTIMATION METHOD=COND INTER
</src>

<lisp>
(setq esn-highlight-known-option-values tmp)
""
</lisp>


** Highlight Input items over 4 characters
When using NONMEM 6 and below, highlight input items over 4 characters in
length.  This may be toggled.


** Highlight Input Items Over Data

When using CSV files, highlight $INPUT data items that are OVER the number of
data items required.  This may be toggled.

** Highlight Operators
When the option "highlighting operators" is enabled, operators and functions
such as =DEXP= are highlighted appropriately:

With highlighting of operators enabled:

<lisp>
(setq tmp esn-highlight-operators)
(setq esn-highlight-operators 't)
""
</lisp>

<src lang="esn">
$SUBROUTINES ADVAN6 TRANS1
$PK 
  CL=THETA(1)*DEXP(ETA(1))
</src>

<lisp>
(setq esn-highlight-operators nil)
""
</lisp>

With highlighting of operators disabled:

<src lang="esn">
$SUBROUTINES ADVAN6 TRANS1
$PK 
  CL=THETA(1)*DEXP(ETA(1))
</src>

<lisp>
(setq esn-highlight-operators tmp)
""
</lisp>

** Highlight Known/Reserved Variables on Left Handed Side of equations
This highlights known or reserved variables on the left handed side of equations
(Like =DADT(#)= in =$DES=)

With highlighting of known/reserved variables on the left handed side of equations enabled:

<lisp>
(setq tmp esn-highlight-lhs)
(setq esn-highlight-lhs 't)
""
</lisp>

<src lang="esn">
$PK
  K = THETA(1)*DEXP(ETA(1))
$DES
  DADT(1)=-K*A(1)
</src>

<lisp>
(setq esn-highlight-lhs nil)
""
</lisp>

With highlighting of known/reserved variables on the left handed side of equations disabled:

<src lang="esn">
$PK
  K = THETA(1)*DEXP(ETA(1))
$DES
  DADT(1)=-K*A(1)
</src>

<lisp>
(setq esn-highlight-lhs tmp)
""
</lisp>

** Highlight Known/Reserved Variables on Right Handed Side of Equations

Highlight known/reserved variables (like =THETA(1)=) on the right-handed side of
an equation in abbreviated code (like =$PK=).


With highlighting of known/reserved variables on the right handed side of equations enabled:

<lisp>
(setq tmp esn-highlight-rhs)
(setq esn-highlight-rhs 't)
""
</lisp>

<src lang="esn">
$PK
  K = THETA(1)*DEXP(ETA(1))
$DES
  DADT(1)=-K*A(1)
</src>

<lisp>
(setq esn-highlight-rhs nil)
""
</lisp>

With highlighting of known/reserved variables on the right handed side of equations disabled:

<src lang="esn">
$PK
  K = THETA(1)*DEXP(ETA(1))
$DES
  DADT(1)=-K*A(1)
</src>

<lisp>
(setq esn-highlight-rhs tmp)
""
</lisp>


** Highlight variables that should not be assigned

Highlight variables that should not be assigned (Like =THETA(1)=) in =$PK=.

When highlighting variables that should not be assigned is enabled, the
following code is displayed:

<lisp>
(setq tmp esn-highlight-lhs-warning)
(setq esn-highlight-lhs-warning 't)
""
</lisp>

<src lang="esn">
$PK
  K        = THETA(1)
  THETA(2) = 2
</src>

<lisp>
(setq esn-highlight-lhs-warning nil)
""
</lisp>

When not toggled, these code-errors are not pointed out with highlighting:

<src lang="esn">
$PK
  K        = THETA(1)
  THETA(2) = 2
</src>

<lisp>
(setq esn-highlight-lhs-warning tmp)
""
</lisp>

** Highlight Forbidden Variables
Highlight forbidden variables in abbreviated code.  For example, the =DADT(#)= is
forbidden in the =$PK= block.

When this is enabled, the following highlighting is performed:

<lisp>
(setq tmp esn-highlight-abbrev-forbidden)
(setq esn-highlight-abbrev-forbidden 't)
""
</lisp>

<src lang="esn">
$PK
  K       = THETA(1) + DADT(1)
  DADT(2) = K
</src>

<lisp>
(setq esn-highlight-abbrev-forbidden nil)
""
</lisp>

When not toggled, these code-errors are not pointed out with highlighting:

<src lang="esn">
$PK
  K       = THETA(1) + DADT(1)
  DADT(2) = K
</src>

<lisp>
(setq esn-highlight-abbrev-forbidden tmp)
""
</lisp>

** Highlight Mu_# not corresponding to ETA(#)

Highlights MU_# variables that do not match the eta(#) when =MU_#+ETA(#)= is specified.

For example, when enabled, the =MU_3= would be highlighted as a "bad" mu in the
following code:

<lisp>
(setq tmp esn-highlight-bad-mu)
(setq esn-highlight-bad-mu 't)
""
</lisp>


<src lang="esn">
$PK
  MU_1 = DLOG(THETA(1))
  TVCL = EXP(MU_1)
  CL   = DEXP(MU_1+ETA(1))

  MU_3 = DLOG(THETA(2))   ; Should be MU_2
  TVV  = EXP(MU_3)
  V    = DEXP(MU_3+ETA(2))

  TVQ  = THETA(3)
  Q    = TVQ*DEXP(ETA(3))
  MU_5 = DLOG(TVQ) ; Should me MU_3
</src>

If not enabled, =MU_3=  and =MU_5= are not tagged as a "bad" mu:

<lisp>
(setq esn-highlight-bad-mu nil)
""
</lisp>


<src lang="esn">
$PK
  MU_1 = DLOG(THETA(1))
  TVCL = EXP(MU_1)
  CL   = DEXP(MU_1+ETA(1))

  MU_3 = DLOG(THETA(1))
  TVCL = EXP(MU_3)
  V    = DEXP(MU_3+ETA(2))

  TVQ  = THETA(3)
  Q    = TVQ*DEXP(ETA(3))
  MU_5 = DLOG(TVQ)

</src>

<lisp>
(setq esn-highlight-bad-mu tmp)
""
</lisp>


** Highlight Undefined variables in abbreviated code

When toggled, this will highlight variables that are undefined in the control
stream.  This option may be annoying to some people since until you type the
correct variable, the typing is red.  For example:

<lisp>
(setq tmp esn-highlight-abbrev-undefined)
(setq esn-highlight-abbrev-undefined 't)
""
</lisp>

<src lang="esn">
$PK
  TVCL = THETA(1)
  CL = TVC
</src>

would be abbreviated in red while typing, until the full =TVCL= is specified as in:
<src lang="esn">
$PK
  TVCL = THETA(1)
  CL = TVCL*DEXP(1)+NO
</src>


<lisp>
(setq esn-highlight-abbrev-undefined nil)
""
</lisp>

However, it is useful to display variables that isn't defined yet (Like =NO=).
When turned off no highlighting is performed:

<src lang="esn">
$PK
  TVCL = THETA(1)
  CL = TVCL*DEXP(1)+NO
</src>


<lisp>
(setq esn-highlight-abbrev-undefined tmp)
""
</lisp>

** Highlighting known commons variables
With this enabled, EsN highlights known common variables like =THETA= when they
occur in the appropriate abbreviated record.  For example:

<lisp>
(setq tmp2 esn-highlight-known-vars)
(setq esn-highlight-known-vars 't)
""
</lisp>

<src lang="esn">
$INFN 
  IF (ICALL.EQ.3) THEN 
    OPEN(50,FILE= 'cwtab1.est') 
    WRITE(50,*) 'ETAS' 
    DO WHILE(DATA) 
      IF (NEWIND.LE.1) WRITE (50,*) ETA 
    ENDDO 
    WRITE(50,*) 'THETAS' 
    WRITE(50,*) THETA 
    WRITE(50,*) 'OMEGAS' 
    WRITE(50,*) OMEGA(BLOCK) 
    WRITE(50,*) 'SIGMAS' 
    WRITE(50,*) SIGMA(BLOCK)
  ENDIF 
</src>

With it disabled, =THETA= is not highlighted:

<lisp>
(setq esn-highlight-known-vars nil)
""
</lisp>

<src lang="esn">
$INFN 
  IF (ICALL.EQ.3) THEN 
    OPEN(50,FILE= 'cwtab1.est') 
    WRITE(50,*) 'ETAS' 
    DO WHILE(DATA) 
      IF (NEWIND.LE.1) WRITE (50,*) ETA 
    ENDDO 
    WRITE(50,*) 'THETAS' 
    WRITE(50,*) THETA 
    WRITE(50,*) 'OMEGAS' 
    WRITE(50,*) OMEGA(BLOCK) 
    WRITE(50,*) 'SIGMAS' 
    WRITE(50,*) SIGMA(BLOCK)
  ENDIF 
</src>

<lisp>
(setq esn-highlight-known-vars tmp2)
""
</lisp>

 

** Highlight Extended Control Stream Variables
When enabled, EsN highlights extended control stream variables when the
occur in a control stream:

<lisp>
(setq tmp2 esn-wfn-color-extended)
(setq esn-highlight-abbrev-undefined 't)
(setq esn-wfn-color-extended 't)
""
</lisp>

<src lang="esn">
$theta (0 10) ; Clearance (L/hr)
$pk
   cl = Clearance*dexp(eta(1))
</src>

<lisp>
(setq esn-highlight-abbrev-undefined 't)
(setq esn-wfn-color-extended nil)
""
</lisp>

If disabled and highlighting undefined variables is selected, this would an
extended variable label would be labeled in red.

<src lang="esn">
$theta (0 10) ; Clearance (L/hr)
$pk
   cl = Clearance*dexp(eta(1))
</src>

<lisp>
(setq esn-highlight-abbrev-undefined nil)
(setq esn-wfn-color-extended nil)
""
</lisp>

Otherwise, if both are disabled, =Clearance= would not be highlighted at all:

<src lang="esn">
$theta (0 10) ; Clearance (L/hr)
$pk
   cl = Clearance*dexp(eta(1))
</src>

<lisp>
(setq esn-highlight-abbrev-undefined tmp)
(setq esn-wfn-color-extended tmp2)
""
</lisp>


* Version 0.12 and below
** Context Sensitive Highlighting
With Emacs Speaks NONMEM, code highlighting may be
implemented with context sensitivity or context insensitivity.

*** Example

For the =$SUBROUTINES= record there is built in option "=ADVAN==".

For
context-insensitive highlighting the "=ADVAN==" will be highlighted in the =$INPUT=
record as well as the =$SUBROUTINES= record:

[[./images/ch-insens.png][Insensitive Highlighting]]

However, with context-sensitive highlighting, the "=ADVAN==" is only highlighted
where it is a valid option:

[[./images/ch-sens.png][Context sensitive highlighting]]

The advantage of context-sensitive highlighting is obvious, however it takes
more computational power to highlight appropriately.

This option may be enabled or disabled through the menu by:

 - NONMEM
   - Display Options
     - Context-sensitive highlighting

Context-sensitive highlighting is turned on by default.


<include file="extended-ch.muse">



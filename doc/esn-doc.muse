
#title Emacs Speaks NONMEM

<contents>


* Overview



** Emacs Speaks NONMEM
Emacs Speaks NONMEM(R) is an Emacs extension that makes editing NONMEM
control streams easier.  Among other things, Emacs Speak NONMEM supports:

 - [[#ch][Code Highlighting]]
 - [[while-editing.caps][Automatic Capitalization]]
 - [[#while-editing.count][Count number of input items]]
 - [[#while-editing.count][Count number of output items]] & [[#code.large][Spit into multiple files if necessary]]
 - Display of [[#80][80 characters on line]], and also automatic [[while-editing.align][alignment and "wrapping"]]
   of records
 - [[#extended][Extended Control Stream Support]]
 - [[while-editing.tab][Tab Completion]]
 - [[#while-saving.tab][Updating table names on copy or save-as]]
 - Ensuring a different purpose for each copy of the file.

Emacs Speaks NONMEM also integrates with the following programs:

 - [[#census][Census]]
 - [[#nmqual][NMQual (submitting jobs only)]]
 - [[#plt][PLT Tools]]
 - [[#psn][Perl Speaks NONMEM (psn)]]
 - [[#pirana][Pirana]]
 - [[#wfn][Wings for NONMEM]]
 - [[#xpose][Xpose]]

You could [[#download][download]] the package, and install by hand, or use EmacsPortable to
install.


* Download




** Download
To install Emacs for NONMEM on Windows, you may wish to install optional
[[#install.support][Support Programs]], install [[#install.emacs][Emacs]], and finally-
[[#install.winesn][install Emacs Speaks NONMEM]].  This page provides the downloads for
Emacs Speaks NONMEM.

** Version 0.1

 - [[https://sourceforge.net/project/downloading.php?group_id=215203&filename=ESN-0.1.exe&a=23587712][Installer]]
 - [[https://sourceforge.net/project/downloading.php?group_id=215203&filename=esn-0.1.zip&a=33234372][Zip File]]
 - [[https://sourceforge.net/project/downloading.php?group_id=215203&filename=esn-0.1.tar.gz&a=33234372][Gz Tarball File]]
 - [[https://sourceforge.net/project/downloading.php?group_id=215203&filename=esn-0.1.tar.bz2&a=33234372][Bzip2 Tarball File]]
 - [[https://sourceforge.net/project/downloading.php?group_id=215203&filename=esn-all-0.1.tar.bz2&a=33089162][Bzip2 Tarball (Includes Mercurial Tree)]]




* Install

** Ghostscript/GSView




While not required, [[#install-ghostscript.ghostscript][Ghostscript]] adds the following capabilities to
Emacs Speaks NONMEM:
 - Printing
 - Integration with Xpose to create rtf documents

Ghostscript is usually installed by default on Unix based machines,
and can be installed on [[#install-ghostscript.windows][windows]] machines as well as Mac OS X machines.

[[#install-ghostscript.gsview][GSView]] allows you to view postscript files on windows and other
operating systems. On a Mac and UNIX machine, this utility is
redundant: other utilities perform the same task.

*** Windows Install
#install-ghostscript.windows
** Ghostscript
#install-ghostscript.ghostscript

By installing ghostscript, you alllow Emacs to print using its standard
interface.  However, if you use EmacsW32 and enable quick-print this is not
needed.

If you choose to [[http://pages.cs.wisc.edu/~ghost/][download ghostscript]], the process for installation is as
follows:

Open the file:

[[images/install-gs-start.png]]

Click on setup, and accept or change the default locations:

[[images/install-gs-loc.png]]

To really harness the power of Ghostscript in Windows, it is useful to install
[[install#gsview][GSView]]

** GSview
#install-ghostscript.gsview

Open the installer file:

[[images/install-gsview-1.png]]

After pressing setup, go through the next few screens:

[[images/install-gsview-2.png]]
[[images/install-gsview-3.png]]

You may choose to associate gsview with postscript files (=.eps= and =.ps=) and even
=.pdf= files.  However, by associating GSview with =.pdf= files, Acrobat and Acrobat
reader will no longer open pdf files by default.

[[images/install-gsview-4.png]]

After selecting the associations made, select the default directory where GSview
will be installed:

[[images/install-gsview-5.png]]

Describe where the installation's program files will be located.  Additionally
choose if this is installed for all users or just the current user.

[[images/install-gsview-6.png]]

Then install:

[[images/install-gsview-7.png]]

*** Mac OSX install


This will allow viewing of postscript files and even conversion to pdf files.



** Tortoise Hg/Mercurial




*** Tortoise Hg (optional)
#install-hg.thg

[[http://bitbucket.org/tortoisehg/stable/downloads/][Tortoise Hg]] provides directory-based version control.  Since versions are index
by a SHA hash, it makes tampering with the version control system self-evident.
Also, Tortoise Hg integrates with Windows Explorer. After downloading, the
installation starts:

[[images/install-thg-1.png]]

After accepting the licence agreement:

[[images/install-thg-2.png]]

Select the Tortoise theme:

[[images/install-thg-3.png]]

Select the shortcut program name:

[[images/install-thg-4.png]]

Install:

[[images/install-thg-5.png]]


[[images/install-thg-6.png]]

Read the release notes:


[[images/install-thg-7.png]]

And restart the computer:

[[images/install-thg-8.png]]

After that, TortoiseHg is installed.



** ImageMagick




Imagemagick is a utility that allows conversion between different
image file formats and editing of images from the command line.  It
also supports many open-source projects, such as Emacs.

*** ImageMagick (optional)
#install-imagemagick.imagemagick

Installing [[http://www.imagemagick.org/script/binary-releases.php#windows][Imagemagick]] allows you to view thumbnails of a directory within Emacs
with the utility =image-dired=.  After [[http://www.imagemagick.org/script/binary-releases.php#windows][downloading]], open the file and start the
install wizard:

[[images/install-imagemagick-1.png]]

Accept the licence agreement:

[[images/install-imagemagick-2.png]]

Read the release information:

[[images/install-imagemagick-3.png]]

Choose Install location:

[[images/install-imagemagick-4.png]]
[[images/install-imagemagick-5.png]]

Choose what is installed.  Note that Imagemagick also allows Perl, C, C++, and
OLE controls to be installed:

[[images/install-imagemagick-6.png]]
Install:

[[images/install-imagemagick-8.png]]

Afterwards instructions on how to test if Imagemagick is installed correctly are
shown:

[[images/install-imagemagick-9.png]]


Finally, imagemagick is installed:

[[images/install-imagemagick-10.png]]


** Emacs




Emacs is a common editor in Unix, and comes by default in many
UNIX distributions.  If you are using [[#install-emacs.win][Windows]] or [[#install-emacs.mac][Mac OSX]][1], you will need
to install Emacs.

*** Windows Install
#install-emacs.win

There are three options when installing Emacs in Windows:
 - With EmacsPortable
 - With [[#install-emacs.emacsw32][EmacsW32]],
 - [[#install-emacs.emacsgnu][installing by hand using the official emacs binaries]]

** EmacsW32 (Installer)
#install-emacs.emacsw32

*** Install Emacs W32

[[http://ourcomments.org/cgi-bin/emacsw32-dl-latest.pl][EmacsW32]] installs Emacs (and a few extra packages) using the standard windows
interface. Sometimes this is based on a beta Emacs distribution (as it is as of
8 June 2009).  Therefore, while easier, it may introduce some instability in the
Emacs editor.

The first step is downloading the EmacsW32 installer.  There are two choices --
patched and unpatched.  The patched version adds additional windows
functionality into Emacs, while the unpatched version is an install using the
latest unpatched binaries. Either package has the same install process.

First download the binary, and click through the warning messages that may
present themselves:

[[images/install-w32-open.png]]

In some operating systems another warning may occur:

[[images/install-w32-vista-warning.png]]

After that, the install begins; Follow the on-screen instructions to complete
installing Emacs:

[[images/install-w32-start.png]]

Accept the GPL licence agreement:

[[images/install-w32-licence.png]]

Read any important information or release information:

[[images/install-w32-information.png]]

In this case, it talks about the possible problems with the new version of
Emacs.  After choose the installation directory:

[[images/install-w32-location.png]]

Then select what parts of Emacs you wish to install:

[[images/install-w32-options.png]]

Choose if you wish to install EmacsW32 for all users on the system:

[[images/install-w32-all-users.png]]

If you decide to install for all users, the install may prompt for removing
previous emacs customizations for the current user:

[[images/install-w32-del-settings-user.png]]

Next choose if you wish to associate any files with emacs:

[[images/install-w32-extensions.png]]

If you choose to associate extensions with Emacs, you may wish to also associate
=.mod=, =.ctl=, =.rpt=, and =.lst= with emacs.  This way, control streams and reports
will automatically open with emacs.  This is done by adding
=".ctl,.rpt,.mod,.lst"= to the comma separated list of extensions, as shown:

[[images/install-w32-add-extensions.png]]

Another possibility is to just associate the NONMEM files with emacs.  This is
done by making the comma separated list only contain =".ctl,.rpt,.mod,.lst"=, as
shown below:

[[images/install-w32-only-nm-ext.png]]

Once you have decided on which extensions to use, next will confirm the
extensions:

[[images/install-w32-confirm-mod.png]]

In this case, the extension =.mod= is associated with Windows Media Player.  This
is because =.mod= files are an early audio format as well as a common extension
for NONMEM control streams.  You may choose to over-ride the windows media
player association and have =.mod= files opened with Emacs instead, or keep the
association with windows media player by checking the box in front of =.mod= (as
shown above).

Next, you choose the name of the program group that will house the emacs
program, by default this is "GNU Emacs"

[[images/install-w32-program-group.png]]

Last an installation summary screen is shown:

[[images/install-w32-summary.png]]

And the install begins:

[[images/install-w32-installing.png]]

At the end of the install, there is an option to customize the EmacsW32:

[[images/install-w32-finish.png]]

You may start emacs and change options first, or do it later, after installing
Emacs Speaks NONMEM.


** Official binaries
#install-emacs.emacsgnu

The official windows binaries may be downloaded from [[http://ftp.gnu.org/pub/gnu/emacs/windows/][Gnu's FTP site.]]
Download the zip file, and then unpack it where you want emacs
installed.  For Emacs Speaks NONMEM, to find Emacs automatically this
directory is =c:=.  This can be done with the free utility [[http://www.7-zip.org/download.html][7-zip]]. Right
click on the file and select the 7-Zip menu, and then extract.  Here
the following dialog is displayed:

[[images/install-unzip.png]]

After you may optionally run the addpm program in the =bin= directory of
the extracted emacs directory, which will create the appropriate
Start-Menu entries.  Its a simple dialog that asks if you wish to
install emacs as the location you specified:

[[images/install-prompt.png]]

Emacs doesn't include all the libraries to extend its functionality.
One option to provide these libraries is to use [[http://gnuwin32.sourceforge.net/][GnuWin32]].  The useful
libraries for emacs include:-

  - Arc - used by archive-mode to edit .arc files.
  - Bzip2 - used by Emacs to automatically decompress .bz2 files.
  - CompFace - used by gnus to display XFace headers in messages.
  - CoreUtils - GNU file, shell and text utilities (also in MSYS)
  - DiffUtils - for ediff and producing patches
  - FindUtils - for grep-find and other file searches.
  - GifLib - library to support GIF images.
  - Grep - for searching through files with grep.
  - Gzip - used by Emacs to automatically decompress .gz files.
  - Jpeg - library to support JPEG images (also in GTK).
  - Lha - used by archive-mode to edit .lzh files.
  - LibPng - library to support PNG images (also in GTK).
  - LibTiff - library to support TIFF images (also in GTK).
  - Make - used by compile for building projects (also in MinGW)
  - OpenSSL - used by gnus to talk to servers over SSL.
  - Patch - used by ediff-patch-file and others to apply patches.
  - Tar - used by tar-mode to edit tar files.
  - TexInfo - used to build Emacs' manuals.
  - Unzip - used by archive-mode for extracting zip files.
  - Xpm - library to support XPM images (bundled with Emacs binaries)
  - Zip - used by archive-mode for editing zip files.
  - Zlib - required by LibPng (also in GTK).



*** Mac Install


#install-emacs.mac




** EmacsPortable



*** Emacs Portable
You may also install Emacs Portable which contains:
 - Emacs 23.1
 - Optional Emacs Packages
   - AucTeX
   - Color-Theme
   - Emacs Speaks Statistics
   - Emacs Speaks NONMEM
   - Emacs Muse
   - nxhtml-mode
 - Apell (for spelling in Emacs)
   - English Dictionary
   - French Dictionary
   - German Dicationary
   - Spanish Dictionary
 - Keyboard Customizations
   - Capslock to Control Swap
   - Dvorak Keyboard Swap (from QWERTY)
   - Dvorak Keyboard and Capslock to Control Swap (from QWERTY)
   - Dvorak Keyboard Swap as long as control, alt, windows, modifiers
     are not pressed, QWERTY otherwise (from QWERTY)
   - Dvorak Keyboard Swap and Capslock to Control Swap.  QWERTY is
     used when control, alt windows modifiers are used (from QWERTY)
 - GnuWin32 utilites
   - Core Utils
   - Libraries for Making Emacs Packages
     - make
     - texinfo
   - Gnus Newsreader
     - compface
     - openssl
   - Image Libraries
     - giflib
     - jpeg
     - lippng
     - tiff
     - xpm
     - zlib
   - Searching Libraries
     - findutils
     - grep
   - Compression Libraries
     - arc
     - bzip2
     - gzip
     - lhz
     - tar
     - unzip
This takes care of many of the utilities needed to make Emacs function
at its best and allows installation either on a portable thumb drive
***or*** locally.  Specifically from the Emacs FAQ


** GnuWin32
GnuWin32[2] provides precompiled native Windows ports of a wide selection
of Free software and libraries. Tools available here that are useful
for Emacs include:

 - **Arc**- used by archive-mode to edit .arc files.
 - **Bzip2**- used by Emacs to automatically decompress .bz2 files.
 - **CompFace**- used by gnus to display XFace headers in messages.
 - **CoreUtils**- GNU file, shell and text utilities (also in MSYS)
 - **DiffUtils**- for ediff and producing patches
 - **FindUtils**- for grep-find and other file searches.
 - **GifLib**- library to support GIF images.
 - **Grep**- for searching through files with grep.
 - **Gzip**- used by Emacs to automatically decompress .gz files.
 - **Jpeg**- library to support JPEG images (also in GTK).
 - **Lha**- used by archive-mode to edit .lzh files.
 - **LibPng**- library to support PNG images (also in GTK).
 - **LibTiff**- library to support TIFF images (also in GTK).
 - **Make**- used by compile for building projects (also in MinGW)
 - **OpenSSL**- used by gnus to talk to servers over SSL.
 - **Patch**- used by ediff-patch-file and others to apply patches.
 - **Tar**- used by tar-mode to edit tar files.
 - **TexInfo**- used to build Emacs' manuals.
 - **Unzip**- used by archive-mode for extracting zip files.
 - **Xpm**- library to support XPM images (bundled with Emacs binaries)
 - **Zip**- used by archive-mode for editing zip files.
 - **Zlib**- required by LibPng (also in GTK).


** AUCTeX

AUCTeX[3] is an extensible package for writing and formatting TeX files
in GNU Emacs and XEmacs. It supports many different TeX macro
packages, including AMS-TeX, LaTeX, Texinfo, ConTeXt, and docTeX (dtx
files).

AUCTeX includes preview-latex which makes LaTeX a tightly integrated
component of your editing workflow by visualizing selected source
chunks (such as single formulas or graphics) directly as images in the
source buffer.

** Emacs Speaks Statistics

Emacs Speaks Statistics (ESS)[4] is an add-on package for emacs-based
text editors such as GNU Emacs and XEmacs. It is designed to support
editing of scripts and interaction with various statistical analysis
programs such S-Plus, R, SAS, Stata, and others. Although all users of
these statistical analysis programs are welcome to apply ESS, advanced
users or professionals who regularly work with text-based statistical
analysis scripts, with various statistical languages/programs, or with
different operating systems might benefit from it the most.

** Emacs Muse

Emacs Muse[5] is an authoring and publishing environment for Emacs. It
simplifies the process of writings documents and publishing them to
various output formats. Muse uses a very simple Wiki-like format as
input.

** Aspell

Emacs has support for spell checking on demand[6]
(ispell) and as your type (flyspell). Both packages depend on a copy
of ispell 3.2 or a compatible spell-checking program. GNU Aspell is a


** Emacs Speaks NONMEM




In windows, it is easiest to install EsN by using the EmacsPortable
distribution.  There are still a few optional
[[#install.support][Support Programs]], you may wish to install.

#install.support
** Support programs

To use all the capabilities of Emacs, it is useful to install a few support
programs.  [[#install-ghostscript.ghostscript][Ghostscript]] and [[#install-ghostscript.gsview][GSView]] are useful helpers for printing, [[#install-imagemagick.imagemagick][Imagemagick]]
allows thumbnail viewing of images within a directory from within emacs,
[[#install-cygwin.cygwin][Cygwin]]/[[#install-cygwin.msys][MSYS]] allows unix-type shells, and [[#install-hg.thg][Tortoise Hg]] provides a directory-based
version control that integrates into windows explorer.

#install.esn
#install.zipfile
*** Installing Emacs Speaks NONMEM without EmacsPortable
Emacs Speaks NONMEM is availble as a
[[#download][zip file, a Gziped tarball file, or a Bziped tarbal file]]. After extracting the
contents, open the =install.el= in emacs and use the following menu:

 - Emacs-Lisp
   - Evaluate Buffer

After, restart Emacs Speaks NONMEM.  This should install Emacs Speaks NONMEM for
the individual who ran the script.  If you would like to install Emacs Speaks
NONMEM globally, open =~/.emacs= and copy the code between the =;Begin ESN= and =;End
ESN= into a global start file (usually creating a new =.el= file in the =site-lisp=
directory (wherever that is located).



* Configuration

** Configure Header





** Customize Keys



*** Emacs Customizations

*** Using Different Keyboards
According to many, the shortcuts used by Emacs can lead to repetitive
stress injury, and many have swapped to different keyboard layouts. A
description of this is found at
http://xahlee.org/emacs/emacs_pinky.html

I have made a few auto-hotkey scripts for ways to deal with the
ergonomics of Emacs. Each of these key bindings may be turned off and
on with the scroll lock key.  These also assume the standard QWERTY
keyboard layout. There are a few types of auto-hot-key scripts that
deal with different keyboards:

 - QWERTY (most common Keyboard)
   - Swap Control and Alt Keys ([[#keys.ctlalt][script]])
   - Swap Caps Lock and Control Keys ([[#keys.capslockctl][script]])
   - Set Caps Lock equal to Control ([[#keys.capslock][script]])
   - Swap Control and Alt Keys, Set Caps Lock equal to Control ([[#keys.capslockctlalt][script]])
 - Colemak keyboard
   - Normal Colemak ([[#keys.colemak][script]])
   - Colemak with Control and Alt Keys Swapped ([[#keys.colemak-ctlalt][script]])
 - Dvorak Keyboard
   - Normal Dvorak ([[#keys.dvorak][script]])
   - Swap Control and Alt Keys ([[#keys.dvorak-ctlalt][script]])
   - Swap Caps Lock and Control Keys ([[#keys.dvorak-capslockctl][script]])
   - Set Caps Lock equal to Control ([[#keys.dvorak-capslock][script]])
   - Swap Control and Alt Keys, Set Caps Lock equal to Control ([[#keys.dvorak-capslockctlalt][script]])
 - Dvorak-QWERTY Command
   - Normal Dvorak-QWERTY ([[#keys.dvorak-qwerty][script]])
   - Swap Control and Alt Keys ([[#keys.dvorak-qwerty-ctlalt][script]])
   - Swap Caps Lock and Control Keys ([[#keys.dvorak-qwerty-capslockctl][script]])
   - Set Caps Lock equal to Control ([[#keys.dvorak-qwerty-capslock][script]])
   - Swap Control and Alt Keys, Set Caps Lock equal to Control ([[#keys.dvorak-qwerty-capslockctlalt][script]])

*** QWERTY Keyboard

#keys.ctlalt
** Swapping Control and alt
Swapping Control and alt allows the user to use their thumb to press
the control key.

Using Auto-hot-key, gives:

<include file="ctlalt.ahk" markup="src" >

However, there are some alt-tab
 issues, see [[http://www.autohotkey.com/docs/misc/Remap.htm#AltTab][Alt-Tab issues at autohotkey.com]]


#keys.capslockctl
** Swap Caps Lock and Control

Some People Advocate swapping Caps Lock and Control Keys to keep this

<include file="capslockctl.ahk" markup="src" >


#keys.capslock
** Set Caps Lock Equal to Control

<include file="capslock.ahk" markup="src" >

#keys.capslockctlalt
** Swap Control and Alt, CapsLock = Control

<include file="capslockctlalt.ahk" markup="src" >

*** Colemak Keyboard
#keys.colemak
** Colemak Keyboard
(Modified from Colemak distribution)
<include file="colemak.ahk" markup="src" >

#keys.colemak-ctlalt
** Colemak Keyboard, Swap Control and Alt
(Modified from Colemak distribution)
<include file="colemak-ctlalt.ahk" markup="src" >

*** Dvorak Keyboard
#keys.dvorak
** Dvorak Keyboard
<include file="dvorak.ahk" markup="src" >
#keys.dvorak-ctlalt
** Dvorak Keyboard, Swap Control and Alt
<include file="dvorak-ctlalt.ahk" markup="src" >
#keys.dvorak-capslockctl
** Dvorak Keyboard, Swap Capslock and Control
<include file="dvorak-capslockctl.ahk" markup="src" >
#keys.dvorak-capslock
** Dvorak Keyboard, CapsLock = Control
<include file="dvorak-capslock.ahk" markup="src" >

** Dvorak Keyboard, Swap Control and Alt, CapsLock = Control
<include file="dvorak-capslockctlalt.ahk" markup="src" >

*** Dvorak-QWERTY Command Keyboard
#keys.dvorak-qwerty
** Dvorak-QWERTY Command Keyboard
<include file="dvorak-qwerty.ahk" markup="src" >
#keys.dvorak-qwerty-ctlalt
** Dvorak-QWERTY, Swap Control and Alt
<include file="dvorak-qwerty-ctlalt.ahk" markup="src" >

#keys.dvorak-qwerty-capslockctl
** Dvorak-QWERTY, Swap CapsLock and Control

#keys.dvorak-qwerty-capslock
** Dvorak-QWERTY, CapsLock = Control
<include file="dvorak-qwerty-capslock.ahk" markup="src" >

#keys.dvorak-qwerty-capslockctlalt
** Dvorak-QWERTY, Swap Control and Alt, CapsLock = Control
<include file="dvorak-qwerty-capslockctlalt.ahk" markup="src" >



* Automation

** While Editing




There are a few changes while editing including:

 - [[#while-editing.caps][Automatic Capitalization]]
 - [[#while-editing.count][Count of Input and Output items]]
 - [[#while-editing.tab][Tab Completion]]
   - [[#while-editing.tabinput][Completing the $INPUT record]]
   - [[#while-editing.tabfile][File Completion]]
   - [[#while-editing.tabscale][Completing Scale Parameters]]
 - [[#while-editing.seed][Automatic Generation of a seed]]
 - [[#while-editing.numest][Numbering of Estimates]]
 - [[#while-editing.updateblock][Updating BLOCK statements]]
 - [[#while-editing.advantran][Updating ADVAN/TRANS descriptions]]

#while-editing.caps
*** Automatic Capitalization

While editing a control stream, Emacs Speaks NONMEM figures out what type of
capitalization needs to be present. Capitalization occurs outside of comments,
and file names to conform with NONMEM's needs. In case your implementation of
NONMEM doesn't require capitalization (like wings for NONMEM), you can turn this
off at:

 - Automation
   - Changes While Editing
     - Smart Capitalization

#while-editing.count
*** Count of Input/Output items

NONMEM can have 20/50 input items, and 20/50 PRED generated output items.  Emacs
Speaks NONMEM can automatically count the number of INPUT items read in while
typing.  A typical example is (under NONMEM 7 which supports 50 input items):

<src lang="esn">
;| Variables 57/50 |;
$INPUT ID DV TIME CMT MDV EVID II SS V0 V1 V2 V3 V4 V5 V6 V7 V8 V9 V10 V11 V12
       V13 V14 V15 V16 V17 V18 V19 V20 V21 V22 V23 V24 V25 V26 V27 V28 V29 V30
       V31 V32 V33 V34 V35 V36 V37 V38 V39 V40 V41 V42 V43 V44 V45 V46 V47 V48
</src>


If seven of these variables are dropped or skipped, this input would be
sufficient for NONMEM 7.1.0:

<src lang="esn">
;| Variables 50/50 |;
$INPUT ID DV TIME CMT MDV EVID II SS V0 V1 V2 V3 V4 V5 V6 V7 V8 V9 V10 V11 V12
       V13=DROP V14=SKIP V15=DROP V16=SKIP V17=DROP V18=SKIP V19=DROP V20 V21
       V22 V23 V24 V25 V26 V27 V28 V29 V30 V31 V32 V33 V34 V35 V36 V37 V38 V39
       V40 V41 V42 V43 V44 V45 V46 V47 V48
</src>

This automatic count can be toggled at:

 - Automation
   - Changes While Editing
     - Update $INPUT's number of variables


This is also performed on the number of variables output to a table:

For example:

<src lang="esn">
;| Variables 50/50 |;
$INPUT ID DV TIME CMT MDV EVID II SS V0 V1 V2 V3 V4 V5 V6 V7 V8 V9 V10 V11 V12
       V13=DROP V14=SKIP V15=DROP V16=SKIP V17=DROP V18=SKIP V19=DROP V20 V21
       V22 V23 V24 V25 V26 V27 V28 V29 V30 V31 V32 V33 V34 V35 V36 V37 V38 V39
       V40 V41 V42 V43 V44 V45 V46 V47 V48

;; Other code skipped

;| Pred Variables 7/50 |;
$TABLE ID NUM EVID MDV V2 CL TVCL V TVV Q TVQ FILE=test.tbl
</src>

Notice that the variables in the =$INPUT= record do not count to the total number
of variables (since they are not generated by PRED).

This automatic counting may be toggled at:

 - Automation
   - Changes While Editing
     - Update $TABLE's number of PRED variables

#while-editing.tab
*** Tab completion

Another feature that may be useful is Tab-completion. Tab completion tries to
guess what you are going to be typing based on the position you are in your
control stream.  There is general tab completion, and tab completion for the
following situations:

 - [[#while-editing.tabinput][Completing the $INPUT record]]
 - [[#while-editing.tabfile][File Completion]]
 - [[#while-editing.tabscale][Completing Scale Parameters]]

** General Tab completion
The most common type of tab completion is completing records and similar types
of completions. For Example, if you start to type:

<src lang="esn">
$EST
</src>

And then press tab, the record is filled out to be

<src lang="esn">
$ESTIMATION
</src>

If however, you don't input anything or you just press tab, the message bar
below shows that you are in the process of completing:

[[./images/tab-start.png][Starting Tab Completion]]


By pressing tab again, it gives a list of options for that record:

[[./images/tab-2.png][Tab completion listing options]]

you can select any of these options by clicking and then pressing return (or
switching to the buffer through the keyboard, and pressing return near the point
of interest)

This also occurs when there is more than one possible completion to what you are
typing.  For example when tying:

<src lang="esn">
$ESTIMATION L
</src>

and then pressing tab, it brings up a list of options that begin with =L=:

[[./images/tab-l.png][Completing the L in the $ESTIMATION record]]


At this point the user can select the completion by the mouse and return, or
just press =A= or =I= to finish typing =LAPLACIAN= or =LIKELIHOOD=, respectively. If the
user had typed:

<src lang="esn">
$ESTIMATION LI
</src>

and then pressed tab, it would fill out the record option completely without any
lists or extra tabs since =LIKELIHOOD= is the only option.

<src lang="esn">
$ESTIMATION LIKELIHOOD
</src>

Tab completion may be turned on or off at:

 - Automation
   - While Editing
     - Tab Completion
#while-editing.tabfile
** File Completion
When completing a known file, Emacs Speaks NONMEM allows you to browse for a
file.  Under windows, there is an option to have a dialog to browse for the
file. This only occurs when there is no information about the file.  For
example:

<src lang="esn">
$DATA
</src>

Pressing a tab after this will bring up file prompt.  This can be toggled with:

#while-editing.tabinput
** Completing the $INPUT record

Another possibility is completing the =$INPUT= completely based on a dataset
specified.  This requires:

 - The input data to be a CSV file with a header
 - The data file to be already specified in the control stream

Therefore, for completion of a dataset, say =data.csv=, the by typing
the following,

<src lang="esn">
$DATA data.csv
$INPUT
</src>

And Pressing a tab, gives:
<src lang="esn">
;| Variables 10/50 |;
$INPUT C PAT TIME=TSFD AMT EVID SS II DV ID BLQ
;C ----------------------------------------------------------------------------
;C                                INPUT Variables
;C ----------------------------------------------------------------------------
;C C:     C
;C PAT:   PAT
;C TIME:  Time of Event (hr)
;C AMT:   Amount of Dose
;C EVID:  Event ID (0: Obs., 1: dose, 2: other, 3: reset, 4: reset & dose)
;C SS:    Steady State (0: Not steady-state, 1: steady-state, 2:steady-state superpositioned)
;C II:    Interdose Interval
;C DV:    Dependent Variable
;C ID:    NONMEM ID
;C BLQ:   BLQ
;C ----------------------------------------------------------------------------
$DATA data.csv IGNORE=C
</src>
After pressing tab:
  - Fills in the $INPUT record
    - Some variables are translated, such as TSFD, based on the user options
    - If there are too many variables, Emacs Speaks NONMEM will automatically
      drop/skip records.
  - Optionally places the =$DATA= record after the =$INPUT= record
    - Useful for NONMEM 6+'s =ACCEPT= and =IGNORE= statements such as
      =IGNORE==(=ID.EQ.2=)
  - Puts the =IGNORE==C option on the =$DATA= record.  This =C= is the first character
    of the header, and will be used to ignore the header any anything else that
    begins with =C=.
  - Optionally adds comments about the variables within the dataset
    - Used in EsN's Xpose script to add labels to the Xpose object to have more
      customizable plots.
  - Optionally moves the cursor to the =$DATA= record (may not move it if there
    are variables that should be dropped.


Overall, tab completion of the =$INPUT= record may be turned
on or off by:
 - Automation
   - Changes While Editing
     - Tab Completion Options
       - Use ESN's tab completion to fill in INPUT with CSV files


The moving of the =$DATA= record before the =$INPUT= record can be toggled by:

 - Automation
   - Changes While Editing
     - Tab Completion Options
       - After INPUT is tab completed, move $DATA before $INPUT and go to end of
         $DATA


The variable comments that can be used by the Xpose script can be toggled by:


 - Automation
   - Changes While Editing
     - Tab Completion Options
       - When completing $INPUT, comment about variable translation


The automatic variable labels may be changed/modified by the following
menu/customization:



 - Automation
   - Changes While Editing
     - Tab Completion Options
       - Customize the comments for of the input variable translation



The variable translation (i.e. DV=CP) for DV can be customized at:

 - Automation
   - Changes While Editing
     - Tab Completion Options
       - Customize assumed DV variable


The variable translation (i.e. TIME=TSFD) for TIME can be customized at:

 - Automation
   - Changes While Editing
     - Tab Completion Options
       - Customize assumed Time variable


Also when there are too many variables some variables are always kept.  The list
of these variables can be customized by:

 - Automation
   - Changes While Editing
     - Tab Completion Options
       - Customize assumed variables that are kept by default


#while-editing.tabscale
** Completing the Scaling parameter

Another feature is tab-completion of the scale parameter.  When the scale
parameter is not filled in, Emacs Speaks NONMEM prompts for the unit assumptions
(sometimes defaults are detected from your control stream), and then calculates
the scale factor.  For example,

<src lang="esn">
$PK
  S1 =
</src>

[[./images/tab-s1.png][Tab Completion first step]]


After following the prompts, Emacs speaks NONMEM fills in the scale parameter
and the assumptions:

<src lang="esn">
$PK
  S1 = V1/1000 ; Dose: mg; Volume: L; Conc: ng/mL
</src>

Note the scale factor calculation currently only works with oral doses.  Support
for some other dosage forms may be added in the future.

#while-editing.seed
*** Seed Generation

When typing in the =$SIMULATION= block, often you have to choose a seed.  Emacs
Speaks NONMEM can choose this seed for you if you wish it to.  It chooses the
seed based on a uniform distribution of all numbers between 1 and 2,147,483,647,
the possible values of the =$SIMULATION= seed.  All this occurs if you press the
"=(=" key.  Therefore,

<src lang="esn">
$SIMULATE
</src>

by just pressing the =(= key becomes:

<src lang="esn">
$SIMULATE (1584308708
</src>

or some other random number between 1 and 2147483647.  This can be toggled at:

 - Automation
   - Changes While Editing
     - Generate Seed with "(" in $SIM record


<include file="align-shared.muse">


*** Numbering of Estimates
#while-editing.numest
Emacs Speaks NONMEM can automatically number the estimates of the =$THETA=,
=$OMEGA=, and =$SIGMA= blocks.  This is done automatically by pressing the
semi-colon.  For example:

<src lang="esn">
$THETA (0 1)
</src>

By pressing the semi-colon can give the following (depending on the options
enabled):

<src lang="esn">
$THETA (0 1) ; 1 -
</src>
or
<src lang="esn">
$THETA (0 1) ;C 1 -
</src>
or
<src lang="esn">
$THETA (0 1); THETA(1) -
</src>
or
<src lang="esn">
$THETA (0 1) ;C THETA(1) -
</src>
These numbers update automatically.  Therefore,

<src lang="esn">
$THETA (0 1) ; 1 -
       (0 2) ; 2 -

       (0 3) ; 3 -
       (0 4) ; 4 -
</src>

by typing an estimate between two and three will renumber the estimates
accordingly:

<src lang="esn">
$THETA (0 1) ; 1 -
       (0 2) ; 2 -
       (0 100)
       (0 3) ; 4 -
       (0 4) ; 5 -
</src>

Also note that this works on =$OMEGA= and =$SIGMA= records with block statements.
Therefore,

<src lang="esn">
$OMEGA
 1 ; 1 - One
 2 ; 2 - Two
 3 ; 3 - Three
 4 ; 4 - Four
 5 ; 5 - Five
 6 ; 6 - Six
</src>

would automatically be renumbered when adding a =BLOCK= statement to the beginning
of the  =$OMEGA= record:

<src lang="esn">
$OMEGA BLOCK(3)
 1 ; 1 - One
 2 ; Two
 3 ; 2 - Three
 4 ; Four
 5 ; Five
 6 ; 3 - Six
</src>

This is a option that depends on the type of control stream you are editing; one
that is intended for [[#census][census]], [[#pdx][PDx Pop]], [[#plt][PLT tools]], [[#pirana][Pirana]], or all other control
streams have different options.  Therefore, by default [[#census][census]] and [[#pirana][Pirana]] do not
update numbers, but [[#pdx][PDx Pop]], [[#plt][PLT tools]], and all other control streams update
numbers.

To toggle numbering of estimates for the type of control stream that you are
currently editing, this may be done at:

  - Automation
   - Changes While Editing
     - Number Estimates


To change it in the various modes you must find the option under


  - Automation
   - Changes While Editing
     - Program Specific Options

This is true of all other options discussed for estimate numbering. The other
options for estimate numbering are for using full labels (i.e. "=THETA(1) -="
instead of "=1 -="), and putting a =C= after the comment line (useful for
[[#plt][PLT tools]]).  The full variable label may be toggled at:


  - Automation
   - Changes While Editing
     - Options
       - Use full labels for numbering (i.e. instead of "1 -", use
         "THETA(1) -") *



The extra =C= may be toggled at:


  - Automation
   - Changes While Editing
     - Options
       - Use ;C for numbered comments (i.e. ";C 1 -" or ";C THETA(1) -") *


#while-editing.updateblock
*** Updating BLOCK statements
Emacs Speaks NONMEM also numbers =$OMEGA=, and =$SIGMA=, block statements
automatically.  This is required for proper numbering, and updating
covariance labels.  Currently there is no toggle for this option, though it may
be missing if alignment, estimate numbering and covariance labels are all turned
off (haven't tested).

When the following =$OMEGA= block exists:

<src lang="esn">
$OMEGA BLOCK(1)
 1 ; 1 -
 2 ;
</src>

Adding an estimate will automatically update the =BLOCK= number:

<src lang="esn">
$OMEGA BLOCK(2)
 1 ; 1 -
 2 ;
 3
</src>

#while-editing.advantran
*** Updating ADVAN/TRANS descriptions

Emacs Speaks NONMEM can automatically number the label the ADVAN/TRANS
descriptions.  For example:

<src lang="esn">
;| Two Compartment Linear Mammillary Model w/First Order Absorpt. |;
;| In terms of CL, V, Q, VSS, and KA                              |;
$SUBROUTINES ADVAN4 TRANS3
</src>

becomes

<src lang="esn">
;| Two Compartment Linear Mammillary Model                        |;
;| In terms of CL, V, Q, and VSS                                  |;
$SUBROUTINES ADVAN3 TRANS3
</src>

when changing =ADVAN4= to =ADVAN3=.  There are also larger descriptions of
ADVAN/TRANS combination that may be used.  For example, with large descriptions,
this becomes:

<src lang="esn">
;| -------------------------------------------------------------- |;
;| Two Compartment Linear Mammillary Model (ADVAN3)               |;
;| -------------------------------------------------------------- |;
;|                                                                |;
;| +---+---------+-----+-----+-----+-----+-----+                  |;
;| | # | CMPTNME | INI | AOn | ADs | DDs | DOb |                  |;
;| +---+---------+-----+-----+-----+-----+-----+    |             |;
;| | 1 | Central | On. | No. | Yes | Yes | Yes |  +-+-+   +-+-+   |;
;| +---+---------+-----+-----+-----+-----+-----+  | 1 |<=>| 2 |   |;
;| | 2 | Periph. | On. | No. | Yes | No. | No. |  +-+-+   +-+-+   |;
;| +---+---------+-----+-----+-----+-----+-----+    |             |;
;| | 3 | Output. | Off | Yes | No. | No. | No. |    V             |;
;| +---+---------+-----+-----+-----+-----+-----+    3             |;
;|                                                                |;
;|                                                                |;
;| #         = Compartment Number                                 |;
;| CMPTNAME  = Compartment Name                                   |;
;| INI       = Initial Status                                     |;
;| AOn       = Allowed On/Off                                     |;
;| ADs       = Dose Allowed                                       |;
;| DDs       = Default for Dose                                   |;
;| DOb       = Default for Observation                            |;
;|                                                                |;
;| -------------------------------------------------------------- |;
;|                                                                |;
;| Shared PK parameters:                                          |;
;|                                                                |;
;|   S1         - Scale for central compartment (also called SC)  |;
;|   S2         - Scale for peripheral compartment                |;
;|   S3         - Scale for output compartment (also called S0)   |;
;|   F1         - Bioavailability for central compartment         |;
;|   F2         - Bioavailability for peripheral compartment      |;
;|   R1         - Rate for central compartment                    |;
;|   R2         - Rate for peripheral compartment                 |;
;|   D1         - Duration for central compartment                |;
;|   D2         - Duration for peripheral compartment             |;
;|   ALAG1      - Absorption lag for central compartment          |;
;|   ALAG2      - Absorption lag for peripheral compartment       |;
;|   F0         - Output fraction (also called F3, FO)            |;
;|   XSCALE     - X parameter                                     |;
;|                                                                |;
;| -------------------------------------------------------------- |;
;| TRANS3                                                         |;
;| -------------------------------------------------------------- |;
;|                                                                |;
;| CL   = Clearance                                               |;
;| V    = Central Volume                                          |;
;| Q    = Inter-compartmental clearance                           |;
;| VSS  = Volume of distribution at steady-state                  |;
;|                                                                |;
;| Relationships:                                                 |;
;|                                                                |;
;| K    = CL/V                                                    |;
;| K12  = Q/V                                                     |;
;| K21  = Q/(Vss-V)                                               |;
;|                                                                |;
;| -------------------------------------------------------------- |;
$SUBROUTINES ADVAN3 TRANS3
</src>


** Autogenerate Code




One of the features of Emacs Speaks NONMEM is the automatic generation of
certain pieces of code that may be useful for analysis, such as
[[#code.cwres][conditional weighted residuals]], [[#code.large][splitting up control streams]] to bypass the 20
(<NONMEM 6.2) or 50 variable =PRED= generated output variable limitation of
NONMEM, and [[#code.secondary][automatically generating code secondary parameters]].  Some of the
code is specific to the NONMEM version that is used.  For this reason a
[[#code.version][discussion]] of how Emacs Speaks NONMEM determines the version is included.

#code.cwres
*** Conditional Weighted Residuals

Conditional Weighted Residuals were proposed for [[http://www.page-meeting.org/?abstract=1001][NONMEM by Andrew Hooker]].
Instructions on what to do to generate the appropriate piece of code are found
in [[http://xpose.sourceforge.net/generic_chm/compute.cwres.html][Xpose's website]].  Emacs Speaks NONMEM helps with the generation by allowing

 - Appropriate Code to be generated depending on the version of NONMEM selected
 - Code to be reflective of the estimation method using.  Currently, the default
   method where conditional weighted residuals are generated is the first order
   conditional estimation method.  Other methods may be specified through the
   menu:
   - Automation
     - Options


If you plan to use Perl Speaks NONMEM, you will need to select

 - Automation
   - Options
     - PsN compatibility -- Use ../../ for .est files

This allows the =.est= files required for the calculation of conditional weighted
residuals to reside in the same directory as the rest of the files and the
control stream.

#code.large
*** Large Tables

When there are over 20 =PRED= generated variables (or 50 in NONMEM VI.2 or
greater), NONMEM can not output the variables using one control stream.  One
solution is to output the model specification, and use the same model to output
the missing variables.  Last the variables should be merged together.  Emacs
Speaks NONMEM can do this automatically when you save, and open as if there were
no limit to the number of variables that can be output.  When there are more
variables output than can be interpreted by NONMEM, Emacs Speaks NONMEM modifies
and splits the files as follows:
 - The open control stream is stripped of variables over the 20/50 =PRED=
   generated variable limit, and places comments at the end of the control
   stream that allows NONMEM to know about these variables and open the base
   control stream as if this translation did not occur.
 - Change the table names in this file to have a trailing =~0= in the file name.
   For example a table output of  =patab1= would be changed to =patab1~0=
 - Create the appropriate number of control streams that read in the model
   specification file and output variables that are missing from =patab1~0=.  For
   example,
   - For the first new control stream, =run1.mod=, create a new control stream
     =run1~1.mod= that outputs tables where the variables are missing from the
     table specified in =run1.mod=.  For a table =patab1=, this control stream would
     output =patab1~1=.
   - More control stream and table information are created if
     necessary. (i.e. =run1~2.mod=, =patab1~2=, =run1~3.mod=, =patab1~3=, etc.
   - To produce the final table, you will need to:
     - Run the first control stream =run1.mod=.  Once this has been completed, run
       all subsequent control streams =run1~2.mod=, =run1~3.mod=, etc.
     - Merge the output datasets together to the final tables.

Note that you will have to create a script to paste the tables together line-by-line.  An example of this using Xpose and R, is as follows:

<lisp>
(let (
      (file (concat esn-path "esn-xpose-summary.R"))
      (p1 nil)
      (ret "")
      )
  (when (file-exists-p file)
    (with-temp-buffer
      (insert-file-contents file)
      (goto-char (point-min))
      (when (re-search-forward "^ *xpose.merge[ \t\n]*[<][-][ \t]*function" nil t)
	(setq p1 (save-excursion (backward-char (length (match-string 0))) (point)))
	(end-of-line)
	(when (search-forward "function" nil t)
	  (beginning-of-line)
	  (setq ret (concat "<src lang=\"R\">\n" (buffer-substring p1 (point)) "</src>"))
	  )
	)
      )
    )
  (symbol-value 'ret)
  )
</lisp>

After loading this function, the tables can be merged with =xpose.merge(1)=.

This automatic splitting and reassembling can be toggled by:

 - Automation
   - Create multiple control streams to output more generated
     variables than NONMEM can handle

#code.secondary
*** Secondary Parameters Output

Another option that Emacs Speaks NONMEM allows is the generation of
secondary parameters for specific PK ADVAN/TRANS combinations.  This
creates a section of code that generates useful secondary parameters
such as half-life when Emacs Speaks NONMEM can determine that the
parameter calculation applies.

For example, in a one-compartment model, Emacs Speaks NONMEM adds the following
parameters:

<src lang="esn">
$PROBLEM test
$SUBROUTINES ADVAN1 TRANS2
$PK
  CL   = THETA(1)*DEXP(ETA(1))
  V    = THETA(2)*DEXP(ETA(2))

  ;| Begin Secondary Parameters
  IF (AMT.GT.0) THEN
    ;; Fixed Amount Variable
    DOSE = AMT
    ;; Time After Dose Calculation
    TDOS = TIME
    TAD  = 0.0
  ENDIF
  IF(AMT.EQ.0) THEN
    TAD  = TIME - TDOS
  ENDIF

  K    = CL/V
  HLK  = -DLOG(0.5)/K
  AUC  = DOSE/CL
  CMAX = DOSE/V
  AUMB = DOSE/(CL*KA)
  VSS  = CL*MRT
  ;| End Secondary Parameters
</src>

The code between =;| Begin Secondary Parameters= and =;| End Secondary Parameters=
will be auto-generated based on the ADVAN/TRANS combination that is used.  This
option may be toggled at:


 - Automation
   - On save, generate derived paramters like duration, AUC, etc., when
     known.

#code.version
*** Determining NONMEM version

Emacs Speaks NONMEM determines the NONMEM version in the following way:

 - The version of NONMEM is specified within the header (must be prompted for, and
   setup appropriately; see [[customize-header][Configure header]]).
 - If Emacs Speaks NONMEM cannot determine the version it
   assumes the version  specified in the Use menu.




** Invisible Corrections



*** File Coding System

Earlier versions of NONMEM may have had issues when running control streams not
created on the platform that NONMEM was run on.  For example, if you created a
control stream on a windows machine, and ran it on a Linux cluster, NONMEM would
not compile correctly.  While this has mostly been fixed with recent versions of
NONMEM, Emacs Speaks NONMEM takes this into consideration when saving a file.
Emacs Speaks NONMEM by default will not change the file coding system.  You may
opt for a few other options:

 - Change the file coding system to Windows if editing the file in windows, otherwise use UNIX encoding
 - Change the file encoding to Windows on save
 - Change the file encoding to Unix on save

This allows a person to change the file codings system to mirror what is needed
for your setup of NONMEM.  These options may be changed using the menu:
 - Automation
   - Changes on Save
     - Change File Coding System

*** Tabs, Return at End of Control Stream

In addition to changing to the appropriate file-coding system, on save Emacs Speaks NONMEM also:

 - Translates Tab characters to spaces
 - Adds a trailing return at the end of the file (if not already present)

Depending on the version of NONMEM, these could cause NONMEM to not compile correctly.






** Between Subject Variability Exploration




*** Between Subject Variability

Emacs Speaks NONMEM generates control streams exploring different types of
between subject variabilities automatically.  The process for creating many
control streams that code for between subject variability is:

 - Code a model
 - Click on Tools -> Generate Between Subject Variability Exploration Control
   Streams

The following screen is shown:

[[images/e-bsv.png][Between Subject Variability]]

where the variables to explore are inferred from the control stream.

 - Select the population variables which you wish to explore between subject variability
 - Select the types of variability to explore
 - Select "Create models"

The models will be created using the following naming convention:

Adding "bsv_" and the between subject variability being explored, summarized by
the

 - Variable Name
 - Between Subject variability type:
   - a - Additive
   - e - Exponential/Lognormal
   - c - Constant Coefficient of Variation/Proportional

Therefore a model with additive between subject variability on Cl and
exponential between subject variability on V would have the following inserted
into the file-name:
 - "bsv_Cla_Ve"

Note, that if you are using [[#xmind][Xmind]] to track control stream generation, it will
create a subtree as shown  in [[./images/bsv.xmind][this mindmap]], exported to HTML [[./images/Project.html][here]].



* Outside Integration

** Census Integration



*** Census Support
Emacs Speaks NONMEM supports the use of Census.
*** Emacs Speaks NONMEM Census Detection

Emacs Speaks NONMEM detects if Pirana assumptions are in effect in the specified
directory by:

 - Checking if Emacs Speaks NONMEM is aware of a Census executable
 - If PLT tools, PDx POP, and Census is not used for this control stream
 - Census support is enabled (Toggled under the "Use" menu)

<include file="pirana-census-reference-models.muse">

Census also includes a custom header that has the line:
<src lang="esn">
;;;;C Parent=
</src>

This allows the parent model to be scanned by Census.

*** Other control stream mark-up.

Comments are coded with the double semi-colon =;;=, so the default header includes
double semi-colons.

Parameter labels are specified after the =$THETA=, =$OMEGA= and =$SIGMA= blocks.  For
this reason parameter numbering for Census control streams is turned off by
default.

*** Other features

Emacs Speaks NONMEM can launch Census from the menu ("Tools") or from the tool-bar.


** NMQual Integration


*** NMQual Integration

Currently Emacs Speaks NONMEM to submit the current control stream via a
button-press, keyboard (Control-c, Control-q), or Menu drop-down (in the "Tools"
menu)


** PDx Pop Integration





** Pirana Integration




*** Emacs Speaks NONMEM Pirana Detection

Emacs Speaks NONMEM detects if Pirana assumptions are in effect in the specified
directory by:

 - Checking if Emacs Speaks NONMEM is aware of a Pirana executable
 - If PLT tools and PDx POP is not used
 - If the control stream has extension =.mod=
 - When either:
   - =pirana.dir= exists (created by pirana in the current directory)
   - Pirana support is enabled (Toggled under the "Use" menu)

<include file="pirana-census-reference-models.muse">

In addition the default header for Pirana includes the reference model line:

<src lang="esn">
;; Ref:
</src>

To allow user specification of the reference model.  It needs to be at the top
so that Pirana will detect the reference model.

*** Putting covariance comments on off-diagonal blocks

Emacs Speaks NONMEM can automatically put the =COV= comment on off-diagonal
estimates when this option is specified.  Not only does EsN place it in the
appropriate place, but it may also remove it when its not appropriate.  For
example, the source:

<src lang="esn">
$OMEGA BLOCK(2)

 0 ; 2 - IIV Cl
 1 ; COV Cl~V
 2 ; 3 - IIV V
</src>

will change the covariance specification when adding the estimate 3 above the 0
estimate (while preserving the rest of the variable label).  This results in:

<src lang="esn">
$OMEGA BLOCK(2)
 3
 0 ; COV IIV Cl
 1 ; 3 - Cl~V
 2 ; COV IIV V
</src>

This is enabled by default.

*** Included Files

Included files are optionally linked


** PLT Tools Integration




*** PLT Tools Support
Requirements:
 - To run from emacs, Emacs must be installed in a directory without spaces.

Features not supported in PLT Tools-mode (PLT does not directly
support these features):

 - Splitting of variables into multiple runs to output over 20 or 50 =$PRED=
   generated variables is not supported when using the PLT tools.
   - When using the suggested =msfooutputfile=, PLT tools stores the =MSFO= in the
     =MISCELLANEOUS/MSFO= directory as =msfo.TIMESTAMP=.  This would require some
     way to get each =MSFO= file involved in the multiple-control stream run and
     then merging the tables together.
   - When specifying a different MSFO file, the =MSFO= file is retained in the
     working directory.  At first glance this may seem like merging together
     tables would be feasible.  However, when there are over 20 to 50 output
     items, EsN modifies the control stream to output slightly different table
     names.  Using PLT tools AllRecords and FirstRecords, files such as
     =AllRecords.txt~0= and =FirstRecords.txt~0= should be stored in the
     home-directory.  Therefore with multiple runs with over 20 or 50 items,
     these files would be overwritten.  However one run could be merged back to
     =AllRecords.txt= and =FirstRecords.txt=.  When this occurs, it would be in the
     working directory, and would not be created in PLT tools, nor stored within
     its system.  Therefore, all graphics of PLT tools would be unable to run,
     and the =AllRecords.txt= or =FirstRecords.txt= would not be stored in PLT's
     system automatically.
 - Does not support multiple all sub-problems control streams.  This
   is implied by having the same output file for every =$PROBLEM= in the
   control stream.

*** Notes for Windows

This has only been tested on Windows.  The most recent version of PLT tools does
not launch correctly unless launched outside of Emacs.  One way to run PLT tools
is to associate =plta= files with PLT tools.  Afterward you may have Emacs "open"
the automation file instead of launching PLT tools and opening the file.  This
option may be toggled under windows.  It requires [[http://www.emacswiki.org/emacs/w32-browser.el][w32-browser]] to be in the load
path.  This should be included in [[#EmacsPortable][EmacsPortable]].

** Automatic Updating of AllRecords.txt and FirstRecords.txt

*** Time Dependent Parameters
The automatic updating of parameters assumes that each parameter is the same
throughout the subject.  If there are time-varying covariates, or inter-occasion
variability this does not hold true.  For these cases, manually move the
variable from the =FirstRecords.txt= to the =AllRecords.txt=.  Emacs Speaks NONMEM
will respect this, and not force the variable to be in =FirstRecords.txt= if the
variable is already in =AllRecords.txt=.

** Automatic PLT Tools Graphic Script Creation

Based on information in the file, including input variable specifications, and
variable labels, EsN generates a template graphic script that may be edited and
changed in PLT tools.  It assumes that your input file is your covariate file,
and fills out variable labels from the control stream.  Once saved in PLT tools,
Emacs Speaks NONMEM will not edit the script again.

** Commenting Records for Brief Summary document

<include file="plt-comments.muse">

This has been fixed in the most recent version of PLT tools.

** Emacs Speaks NONMEM's UserDefinedScript.R

** Links in PLT tools
Links in PLT tools require =grep= to be installed on the system.  It is installed
by default on max and unix systems.  It is also installed in the
[[#EmacsPortable][EmacsPortable]] distribution.


** PsN Integration




*** Perl Speaks NONMEM integration
Emacs Speaks NONMEM allows you to run the following commands from
[[http://psn.sourceforge.net][Perl Speaks NONMEM]] from within Emacs:

 - Boostrap (bootstrap)
 - Case Deletion Diagnostics (cdd)
 - Log Liklihood Profiling (llp)
 - Summaries (sumo)
 - Visual Predictive Check (vpc)
 - Numerical Predictive Check (npc)

Things not supported yet
 - Stochastic Simulation and Estimation (sse)
 - Stepwise Covariate Model Building (scm)
 - Update Initial Values of model (update_inits)
 - Wrap rows with input that is more that 20 columns (create_cont_data)
 - Subset data (create_subsets)
 - Print Data Statistics (data_stats)
 - Non-parametric estimation on extended grid (extended_grid)
 - Non-parametric bootstrap (nonpb)
 - Individual Probabilities (pind)
 - Standard Errors of Etas (se_of_eta)
 - Unwrap data that was coded with the CONT data item for split rows (unwrap_data)

Things that will not be supported:
 - Single Valued Columns (single_valued_columns)


** Wings for NONMEM Integration



*** Wings for NONMEM integration
In addition to the [[#extended][extended]] control stream integration, Emacs Speaks NONMEM
allows you to run the following wings for NONMEM programs from within Emacs
 - Boostrapping (nmbs)
 - Randomization Test

Things still to add:
 - Display sorted list of run summary objective function lines (nmobj)
 - Create a tab-delimited file with one-record per subject (nmone)
 - Non-Compartmental Functions:
   - Calculate Cmax, Tmax, AUC(0-infty), AUC(0-t), and time to reach target
     concentration for a simulation (ncasim)
   - Calculate Cmax, Tmax, AUC(0-infty), AUC(0-t), and time to reach target
     concentration for a bootstrap (ncabs)
 - Create a Model building table  with all parameter estimates merged into a
   tab-delimited table file (nmmbt)
 - Log-Likelihood Profiling (nmllp)
 - List of Run Summaries (nmlst)
 - Unreliable Simulation/Estimation step workaround (nmgosim)
 - Display Condition Number & extreme eigen values (nmeigen)
 - Display the number of failed bootstraps (nmbssxs)

Things that may be added:
 - Take final parameter estimates and puts them in the original control stream
   (nmctl).  This is done in emacs speaks nonmem as well (but it doesn't support
   NONMEM 7 yet...)
 - Create CrossGraphics files (nmcg)

Things that will not be added:
 - Creating a control stream based on a model specification file (nmmsf)
   - Already supported with [[links.msfo][MSFO hyperlinks]].
 - Display intermediate THETA values during NONMEM estimation (nmint)

These are all described on the [[http://wfn.sourceforge.net][Wings For NONMEM website]].


** Xpose Integration




Emacs speaks NONMEM supports features that allow Xpose integration.  These
features include:

 - [[#xpose.xpfiles][Choosing "appropriate" file names for Xpose]]
 - [[#xpose.tabs][Creating appropriate tables for Xpose]]
 - [[#xpose.xpose-doc][Auto-generate Summary Script/RTF Documents]]



#xpose.xpfiles
*** Xpose File Names

[[http://xpose.sourceforge.net][Xpose]], by default assumes that the control stream is named =run#.mod= where =#= is a
number indicating which run was completed.  Additionally the NONMEM output is
assumed to be =run#.lst=.  Emacs Speaks NONMEM supports two different paradigms
when naming files:

 - Naming files according to Xpose assumptions
 - Naming files without regard to Xpose's assumed control stream names or output
   files.



** Using Xpose conventions

When using Xpose's naming conventions Emacs Speaks NONMEM automatically chooses
the appropriate file names.  For example If you open a model, say =001.mod= in an
Xpose directory, the first save changes the name of the file to =run001.mod=.  If
there are multiple runs in the Xpose directory (say up to =run10.mod=), Emacs
Speaks NONMEM renames your control stream to =run11.mod= upon save.  This options
can be toggled under the Xpose menu.


When using the file-names =runX.mod=, and Xpose support enabled, Emacs Speaks
NONMEM assumes that Xpose is going to be run.  When the following is enabled, Emacs Speaks NONMEM automatically generates the appropriate tables for Xpose:


- Xpose
  - Generate Xpose Tables



** Using Arbitrary Names

When using Xpose's naming convention, Emacs Speaks NONMEM can still generate
appropriate Xpose files.  This may be toggled on by:



 - Xpose
  - Only generate Xpose tables for files named runX.mod


Without this option enabled, Xpose tables may be generated regardless of the
name of the control stream.  The table names will be determined by the following
process:


 - Step 1, Determining a run-number.  This is the last number before the extension
   =one-cmt-01.ctl= would have the run-number of 1.  If EsN can't determine the
   run-number, it assumes =0=.
 - Step 2, determine the extension for the table.  The extension is the
   beginning of the file name before the determined run number.  For example
   =one-cmt-01.ctl= would have an extension of =one-cmt=.
 - Step 3, construct the table names.  For xpose tables, the xpose table name
   (like =sdtab=), is concatenated with the  run-number and extension to
   form a new file of the form =xpose-table-run-number-extension=.  In the case of
   the standard table =sdtab=, and the control-stream name =one-cmt-01.ctl=, the final
   table name will be =sdtab1one-cmt=.



Note that if you just use a number =001.mod=, for instance, then the output files
conform to the standard Xpose naming scheme, =sdtab1=.

To input files from =one-cmt-01.ctl= into R, you could use the following
code:


<src lang="R">
xdpbd1 <- xpose.data(1,tab.suffix="one-cmt");
</src>

#xpose.tab
*** Xpose tables

#xpose.xpose-doc
*** Xpose Documentation


* Display

** 80 Character Limit




In NONMEM versions before NONMEM 6.2, there was a 80 character limit per line.
To cope with this, esn supports word-wrapping, and highlighting lines over 80
characters.  There are two options when highlighting the lines: highlight the 80
character cutoff and highlight only lines that go over the 80 character limit.

*** Only lines over 80 characters

One of the ways the ESN supports earlier NONMEM control streams is to only
highlight lines that are over 80 characters.  An example of this is follows:

[[images/80-only.png][Highlight only 80 characters]]
Therefore whenever the line exceeds 80 characters, the offending piece is
highlighted.  This is also true with extended control streams, as discussed
[[#80.extended][below.]]  This may be enabled or disabled by the following menu:

 - Display
   - Show lines over 80 characters

*** All lines except current

Another method ESN supports earlier NONMEM control streams is to highlight lines
that are 80 character and more, and also highlight the 80 character limit for
all lines except the line that your current cursor resides.  This is shown below:

[[images/80-all.png][Highlight 80 character bounary]]


Therefore not only is the offending piece highlighted if the line is over 80
characters, but the limit is shown.  Notice that with extended control streams,
this limit is different for each line.  This option is computationally expensive
(especially with windows), and is off by default.  It may be toggled by:


 - Display
   - Show lines over 80 characters



#80.extended
*** Extended control stream support

[[#extended][Extended control streams]] translate parameter names to their corresponding =THETA=,
=ETA=, and =EPS= representation.  With this change the final control stream line
length changes, (up or down depending on the length of the parameter name) and
the 80 character limit will change.  For example:

<src lang="esn">
$THETA (0 1) ; Cl
$PK
  TVCL = Cl
</src>

Renders as:
<src lang="esn">
$THETA (0 1); Cl
$PK
  TVCL = THETA(1)
</src>

Which gives a difference of 8 characters.  These 8 characters are considered
when creating both the 80 character boundaries when the line is over 80 characters, as shown below:

[[images/80-all-ctl.png][Highlight character bounary using extended control streams]]



;  LocalWords:  NONMEM esn


** Code Highlighting




*** Overview
Code highlighting is a standard feature of many development
platforms.  Highlighting implements context sensitive highlighting, and extended
variable highlighting.

*** Options
** Context Sensitive Highlighting
With Emacs Speaks NONMEM, code highlighting may be
implemented with context sensitivity or context insensitivity.

*** Example

For the =$SUBROUTINES= record there is built in option "=ADVAN==".

For
context-insensitive highlighting the "=ADVAN==" will be highlighted in the =$INPUT=
record as well as the =$SUBROUTINES= record:

[[./images/ch-insens.png][Insensitive Highlighting]]

However, with context-sensitive highlighting, the "=ADVAN==" is only highlighted
where it is a valid option:

[[./images/ch-sens.png][Context sensitive highlighting]]

The advantage of context-sensitive highlighting is obvious, however it takes
more computational power to highlight appropriately.

This option may be enabled or disabled through the menu by:

 - NONMEM
   - Display Options
     - Context-sensitive highlighting

Context-sensitive highlighting is turned on by default.


<include file="extended-ch.muse">




** Displaying Symbols




*** Overview
Emacs Speaks NONMEM can display variables, subscripts and other such
things as symbols.  For example, a nonsensical code of =THETA=, =ETA=, and
=EPS= values is usually displayed as:

[[./images/ds-no-theta.png][Symbols are not displayed]]

However, when using symbols, this same code is abbreviated using symbols:

[[./images/ds-theta.png][Displaying Symbols]]

*** What is changed to a symbol
 Code || Symbol/Abbreviation
=THETA(1)= | <literal style="html">&theta;<sub>1</sub></literal><literal style="latex">$\theta_1$</literal>
=ETA(1)= | <literal style="html">&eta;<sub>1</sub></literal><literal style="latex">$\eta_1$</literal>
=EPS(1)= | <literal style="html">&epsilon;<sub>1</sub></literal><literal style="latex">$\varepsilon_1$</literal>
=K_OUT= | <literal style="html">K<sub>OUT</sub></literal><literal style="latex">$K_{OUT}$</literal>
=K12= | <literal style="html">K<sub>12</sub></literal><literal style="latex">$K_{12}$</literal>
=A**(1+X)= | <literal style="html">A<sup>1+X</sup></literal><literal style="latex">$A^{1+X}$</literal>
=A**2= | <literal style="html">A<sup>2</sup></literal><literal style="latex">$A^{2}$</literal>
=A*B= | <literal style="html">A&times;B</literal><literal style="latex">$A\times B$</literal>

*** Options
** THETA/ETA/EPS Options
** Multiply Symbol
** Fraction Symbols
Emacs Speaks NONMEM allows =1/2=, =1/4=, and =3/4= to be represented as either a
compressed fraction symbol, or a regular text.  If the option for a compressed
fraction is used, the display is as follows:
[[./images/ds-frac.png][Fractions Compressed]]

If the option is not enabled, the display is as follows:

[[./images/ds-nofrac.png][Fractions Regular Display]]
*** Enabling/Disabling

This option may be toggled with the following menu:

 - NONMEM
   - Display Options
     - Symbol Options
       - Use Fraction Symbol for 1/2, 1/4 and 3/4

By default, this option is disabled.

** Specific Superscript symbols
Emacs Speaks NONMEM allows =**1=, =**2=, and =**3= to be represented as either a
compressed superscript, or a regular supersript.  If the option for a compressed
superscript is used, the display is as follows:

[[./images/ds-smallsuperscript.png][Comparessed/Small Superscript]]

However, if the option is not enabled, the display is as follows:

[[./images/ds-regsuperscript.png][Regular Superscript]]

*** Enabling/Disabling

This option may be toggled with the following menu:

 - NONMEM
   - Display Options
     - Symbol Options
       - Use the superscript symbol for for **1, **2, and **3

By default, this option is disabled.


*** Operating System Differences
*** Enabling/Disabling



** Read-Only/Hidden Text



*** Header

Some of the auto-generated text such as the Header and Code sections are
automatically generated.  For example the default header added to control streams:

<src lang="esn">
$PROBLEM tmp
 ; ------------------------------------------------------------------------------
 ; Model:
 ; Purpose:
 ; (c)
 ; Completed
 ; ------------------------------------------------------------------------------
 ; Input Files:
 ; ------------------------------------------------------------------------------
 ; Output Files:
 ; ------------------------------------------------------------------------------
 ; Modification Log:
 ; ------------------------------------------------------------------------------
</src>

There are options to protect the auto-generated regions of the header.  By
protecting these regions the following benefits are realized:

 - User may not inadvertently edit items generated from other users (such as the
   modification log).[7]
 - When editing the file the portions of the header that are searched for during
   update are not changed; Therefore, another header will not be inadvertently added.[7]

This protection may be done by hiding and/or making portions of the buffer
read-only.  Otherwise the protection may be turned off completely.

** Read only portions

The first way to protect the header is to make the generated portions read-only.
This is accomplished by toggling on the option:

 - Display
   - Make generated portions read-only

When this option is enabled, only sections that should be edited are allowed to
be edited.  In the case of the default header this is the =Purpose:= section.

** Hidden portions

If generated portions are read-only, a further method of ensuring the
auto-generated portions of the header are not inadvertently changed is to hide
part of the header from the user.  In this example, the header would reduce to:

<src lang="esn">
$PROBLEM tmp
 ; Purpose:
</src>

All of the auto-generated content is still present, but not viewable to the user.  This may be toggled by:

 - Display
   - Hide generated portions (requires uneditable regions to be read-only)

** Portions where this may apply

These options may apply to the header (as shown in example above), or
automatically generated code for conditional weighted residuals.  For the header
this may be toggled at:

 - Display
  - Portions hidden or read only

For conditional weighted residual code, this may be toggled at:

 - Display
       - Hide CWRES generated code



* Control Stream Features

** Extended Control Streams




*** Overview

Extended control streams are originally defined in Nick Holford's
[[http://wfn.sourceforge.net/wfncs.htm#control_streams][Wings for NONMEM application]].  Emacs for NONMEM allows extended
control streams to be used regardless of the platform you are using.
There are a few differences in implementation, though.  Much of this
description was shamelessly lifted (with permission) from the
[[http://wfn.sourceforge.net/wfncs.htm#control_streams][Wings for NONMEM extended control stream definitions]].

*** Key Definitions

** Parameter Names

Any control stream can be used with Emacs Speaks NONMEM. However,
certain conventions can be used to interface with Wings for NONMEM,
and allow renumbering of =THETA=, =OMEGA= and =SIGMA= variables within Emacs
Speaks NONMEM.  One of these conventions is formatting =$THETA=, =$OMEGA=
and =$SIGMA= records with one parameter value per line and adding a
comment on that line that contains a meaningful parameter name labels
the parameter.

Parameter names are taken from the first non-numeric word after the
comment delimiter =";"= e.g. the following examples all produce the
parameter name ="POPE0"= for =THETA(1)=.  Unlike a standard control stream
there is not a 6 character limit on the length of these names when
they are used on the right hand side of an expression.

<src lang="esn">
$THETA (0,150.,) ; POPE0
$THETA (0,150.,) ; 1 POPE0
$THETA (0,150.,) ; POPE0 1
$THETA (0,150.,) ; pope0
$THETA (0,150.,) ; POPE0 L/min
</src>


Parameter names followed immediately by ="("= or ="{"= or ="["= or =";"= are
recognized e.g. all of the following will find "POPE0" as the
parameter name.

<src lang="esn">
$THETA (0,150 ) ;POPE0(1)
$THETA (0,150 ) ;POPE0{1}
$THETA (0,150 ) ;POPE0[1]
$THETA (0,150 ) ;POPE0;1
</src>

When =$OMEGA BLOCKs= are used each row of off-diagonal and diagonal
elements should be on one line with a following comment and parameter
name for the diagonal element.

<src lang="esn">
$OMEGA BLOCK (2)
0.5 ; ETAE0
0.1 0.5 ; ETAEMAX
</src>

If the SAME option is used then a parameter name can be specified by
inserting an $OMEGA BLOCK record with subsequent records with a ";;"
delimiter as the first two characters on the line. This convention is
only required when using an extended control stream.

<src lang="esn">
$OMEGA BLOCK (2)
0.5 ; ETAE0
0.1 0.5 ; ETAEMAX
$OMEGA BLOCK (2)SAME
;; ETAE02
;; ETAEMAX2
</src>

*** Extended Control Stream

Wings for NONMEM and Emacs Speaks NONMEM supports an extended form of NM-TRAN
control stream. The extended control stream is not case sensitive (but preserves
case of filenames, comments, exclusion characters, etc.), allows embedded tab
characters and does not require explicit =THETA=, =ETA= or =ERR/EPS= references in the
model code. Standard control stream records may be freely mixed with extended
control stream records when submiting to Wings for NONMEM.  Otherwise, Emacs
Speaks NONMEM chooses one model to maintain.

** Example: Standard Control Stream

=Theopd.ctl= is an example of a standard NM-TRAN control stream which uses an Emax
pharmacodynamic model to describe the relationship between theophylline
concentration and peak expiratory flow rate (PEFR) in patients with severe
airways obstruction (Holford et al. 1993a).

<src lang="esn">
$PROB theophylline pharmacodynamics standard control stream
$DATA theopd.dat IGNORE #
$INPUT ID TIME THEO AGE WT GEND RACE DIAG PEFR=DV
$ESTIM PRINT=1 POSTHOC
MSFO=theopd.msf
$COV
$THETA (0,150.,) ;popE0 1
$THETA (0,200.,) ;popEMAX 2
$THETA (.001,10,) ;popEC50 3
$OMEGA 0.5 ;etaE0 1
$OMEGA 0.5 ;etaEMAX 2
$OMEGA 0.5 ;etaEC50 3
$SIGMA 100 ;errSD 1
$PRED
E0=THETA(1)*EXP(ETA(1))
EMAX=THETA(2)*EXP(ETA(2))
EC50=THETA(3)*EXP(ETA(3))
Y = E0 + EMAX*THEO/(THEO+EC50) + ERR(1)
$TABLE ID TIME THEO AGE WT GEND RACE DIAG
E0 EMAX EC50 Y
NOPRINT ONEHEADER FILE=theopd.fit
</src>

** Example: Extended Control Stream

The following is an example of an extended control stream (theopd2.ctl) which
implements the same code as the standard control stream. Parameter names are
used in the model records to identify where =THETA=, =ETA= and =ERR= references are
required when the extended control stream is translated into the standard
control stream for NM-TRAN. Use of the extended control stream means it is no
longer necessary to count each of the =$THETA=, =$OMEGA= and =$SIGMA= records and
tediously ensure they match with the =THETA=, =ETA= and =ERR= subscripts in the model.

I have used the prefix ="pop"= for population parameters, ="eta"= for population
parameter random effects and ="err"= or ="eps"= for residual unknown random
effects. This is a personal convention. You may choose any parameter names you
wish to identify =THETA=, =ETA= and =ERR/EPS= in the control stream.

<src lang="esn">
$PROB theophylline pharmacodynamics extended control stream
$DATA theopd.dat IGNORE #
$INPUT ID TIME THEO AGE WT GEND RACE DIAG PEFR=DV
$ESTIM PRINT=1 POSTHOC
MSFO=theopd.msf
$COV
$THETA (0,150.,) ; popE0
$THETA (0,200.,) ; popEMAX
$THETA (.001,10,) ; popEC50
$OMEGA 0.5 ; etaE0
$OMEGA 0.5 ; etaEMAX
$OMEGA 0.5 ; etaEC50
$SIGMA 100 ; errSD
$PRED
E0=pope0*EXP(etae0)
EMAX=popemax*EXP(etaemax)
EC50=popec50*EXP(etaec50)
Y = E0 + EMAX*THEO/(THEO+EC50) + errsd
$TABLE ID TIME THEO AGE WT GEND RACE DIAG
E0 EMAX EC50 Y
NOPRINT ONEHEADER FILE=theopd.fit
</src>

A special convention is used when parameter names occur on the left hand side of
an expression. Once a parameter name has appeared on the left hand side no
further substitutions are made when that parameter name appears in any following
right hand side expressions. A model record in this context is an =$PRED=, =$PK=,
=$ERROR=, =$DES=, =$AES= record. After translation the extended control stream example
will be identical to the standard control stream example.


*** Using ESN's extended control streams

There are two options for using ESN's extended control streams:

 - Use it manually and/or in conjunction with Wings for NONMEM
 - Automatically translate between a standard control stream and extended
   control stream.

When using extended control stream options manually, you may change back and
forth between =THETA, ETA,= and =ERR/EPS= values through the following two menu
options:

 - Extended
   - Change THETA, ETA,EPS to WFN parameter names

or

 - Tools
   - Change THETA, ETA,EPS to WFN parameter names

The other option is to automate extended control stream translation.  This opens
files with the extended control stream parameter names filled in, and then saves
as a standard control stream.  Unlike WFN, mixing extended control stream
variable names and standard =THETA(1)=, =ETA(1)=, =EPS(1)= is not well supported.
While you may enter =THETA(1)= into the control stream, upon save, this is change
to the label for =THETA(1)=, like =popE0=.  Automating extended control stream may
be toggled with:

- Extended
   - Translate Extended Control Streams to Normal Control Streams\; Open
       Extended

*** Emacs Speaks NONMEM differences/options

** Mu variable referencing (not implemented in WFN)

NONMEM 7 introduces =MU= variable referencing ([[#mu][described here]]).  Each =MU_i=
variable mus be associated with an =ETA=, and each =MU_i= must have a relationship
that is of the form =MU_i+ETA(i)=.  For this reason, an additional translation has
been defined in the extended control stream when using EsN, that is:
 - =MU_eta_variable_label=  is translated to =MU_i=
 - =MU+eta_variable_label= is translated to =MU_i+ETA(i)=.

For example, if the following =$OMEGA= block is defined,

<src lang="esn">
$OMEGA 0.5 ; etaE0
$OMEGA 0.5 ; etaEMAX
$OMEGA 0.5 ; etaEC50
</src>

The following table details the translations that may occur:

Original Value || Extended Control Stream
MU_1 = log(THETA(1))  | MU_etaE0 = log(THETA(1))
E0 = EXP(MU_1+ETA(1)) | E0 = EXP(MU_etaE0+etaE0)
E0 = EXP(MU_1+ETA(1)) | E0 = EXP(MU+etaE0)
E0 = EXP(ETA(1)+MU_1) | E0 = EXP(etaE0+MU_etaE0)
E0 = EXP(ETA(1)+MU_1) | E0 = EXP(etaE0+MU)


A full example of an extended control stream is:

<src lang="esn">
$PROB theophylline pharmacodynamics extended control stream
$DATA theopd.dat IGNORE #
$INPUT ID TIME THEO AGE WT GEND RACE DIAG PEFR=DV
$ESTIM PRINT=1 POSTHOC
MSFO=theopd.msf
$COV
$THETA (0,150.,) ; popE0
$THETA (0,200.,) ; popEMAX
$THETA (.001,10,) ; popEC50
$OMEGA 0.5 ; etaE0
$OMEGA 0.5 ; etaEMAX
$OMEGA 0.5 ; etaEC50
$SIGMA 100 ; errSD
$PRED
mu_etae0 = log(pope0)
mu_etaemax = log(popemax)
mu_etaec50 = log(popec50)
E0=EXP(mu+etae0)
EMAX=EXP(mu+etaemax)
EC50=EXP(mu+etaec50)
Y = E0 + EMAX*THEO/(THEO+EC50) + errsd
$TABLE ID TIME THEO AGE WT GEND RACE DIAG
E0 EMAX EC50 Y
NOPRINT ONEHEADER FILE=theopd.fit
</src>

This is equivalent to a standard control stream:

<src lang="esn">
$PROB theophylline pharmacodynamics extended control stream
$DATA theopd.dat IGNORE #
$INPUT ID TIME THEO AGE WT GEND RACE DIAG PEFR=DV
$ESTIM PRINT=1 POSTHOC
MSFO=theopd.msf
$COV
$THETA (0,150.,) ; popE0
$THETA (0,200.,) ; popEMAX
$THETA (.001,10,) ; popEC50
$OMEGA 0.5 ; etaE0
$OMEGA 0.5 ; etaEMAX
$OMEGA 0.5 ; etaEC50
$SIGMA 100 ; errSD
$PRED
mu_1 = log(THETA(1))
mu_2 = log(THETA(2))
mu_3 = log(THETA(3))
E0= EXP(mu_1+ETA(1))
EMAX= EXP(mu_2+ETA(2))
EC50= EXP(mu_3+ETA(3))
Y = E0 + EMAX*THEO/(THEO+EC50) + EPS(1)
$TABLE ID TIME THEO AGE WT GEND RACE DIAG
E0 EMAX EC50 Y
NOPRINT ONEHEADER FILE=theopd.fit
</src>

** Optional Skipping of variable names
When using [[#plt][PLT tools]], you may wish to add comments that a
read in the brief summary pdf file that will include a description of
the parameter estimated.  According to PLT tools' manual, any comment
that is coded with =;C= will be included in this file.  The following
code would be recognized by PLT tools:
<src lang="esn">
$THETA (0,150.,)  ;C THETA(1) - popE0
$THETA (0,200.,)  ;C THETA(2) - popEMAX
$THETA (.001,10,) ;C THETA(3) - popEC50
$OMEGA 0.5 ;C ETA(1) - etaE0
$OMEGA 0.5 ;C ETA(2) - etaEMAX
$OMEGA 0.5 ;C ETA(3) - etaEC50
$SIGMA 100 ;C EPS(1) - errSD
</src>

After being recognized, the following text will be added to the brief summary:

<src>
THETA(1) - popE0
THETA(2) - popEMAX
THETA(3) - popEC50
ETA(1) - etaE0
ETA(2) - etaECMAX
ETA(3) - etaEC50
EPS(1) - errSD
</src>

which may be more clear than other types of labeling.  According to
Wings-for-NONMEM, these would all would be invalid labels since they
are all =C= variable labels.  In Emacs Speaks Statistcs, however, this
initial =C THETA=, =C ETA=, or =C EPS= can be ignored, and the variables would
still have the names =popE0=, =popEMAX=, etc.

With this in mind, the following control stream would still be valid:

<src lang="esn">
$PROB theophylline pharmacodynamics extended control stream
$DATA theopd.dat IGNORE #
$INPUT ID TIME THEO AGE WT GEND RACE DIAG PEFR=DV
$ESTIM PRINT=1 POSTHOC
MSFO=theopd.msf
$COV
$THETA (0,150.,)  ;C THETA(1) - popE0
$THETA (0,200.,)  ;C THETA2 - popEMAX
$THETA (.001,10,) ;C THETA[3] - popEC50
$OMEGA 0.5 ;C ETA(1) - etaE0
$OMEGA 0.5 ;  ETA(2) - etaEMAX
$OMEGA 0.5 ;C OMEGA3 -  etaEC50
$SIGMA 100 ;C SIGMA1 errSD
$PRED
E0=pope0*EXP(etae0)
EMAX=popemax*EXP(etaemax)
EC50=popec50*EXP(etaec50)
Y = E0 + EMAX*THEO/(THEO+EC50) + errsd
$TABLE ID TIME THEO AGE WT GEND RACE DIAG
E0 EMAX EC50 Y
NOPRINT ONEHEADER FILE=theopd.fit
</src>

Overall, Emacs Speaks NONMEM would ignore:
 - Any C's after the initial comment
 - =THETA=
 - =THETA#=
 - =THETA(#)=
 - =THETA[#extended.]=
 - =THETA{#}=
 - =ETA=
 - =ETA#=
 - =ETA(#)=
 - =ETA[#extended.]=
 - =ETA{#}=
 - =OMEGA=
 - =OMEGA#=
 - =OMEGA(#)=
 - =OMEGA[#extended.]=
 - =OMEGA{#}=
 - =EPS=
 - =EPS#=
 - =EPS(#)=
 - =EPS[#extended.]=
 - =EPS{#}=
 - =ERR=
 - =ERR#=
 - =ERR(#)=
 - =ERR[#extended.]=
 - =ERR{#}=
 - =SIGMA=
 - =SIGMA#=
 - =SIGMA(#)=
 - =SIGMA[#extended.]=
 - =SIGMA{#}=

Where =#= represents an integer.

<include file="plt-comments.muse">



** Parameter Names that are not allowed
Emacs Speaks NONMEM does not allow certain reserved keywords to be variable
labels.  For example =EXP= and =DEXP= are reserved in NONMEM control streams to have
a specific meaning, and cannot be assigned to a variable label.

** Parameter Names in the ZERO option

In addition to specifying variables in the =$PK= or =$PRED= portion of the control
stream, Emacs Speaks NONMEM allows variable labels in the =ZERO== option of the
=$ESTIMATION= record,  For example:

<src lang="esn">
$PROB theophylline pharmacodynamics extended control stream
$DATA theopd.dat IGNORE #
$INPUT ID TIME THEO AGE WT GEND RACE DIAG PEFR=DV
$ESTIM PRINT=1 METHOD=HYBRID ZERO=(etaE0)
MSFO=theopd.msf
$COV
$THETA (0,150.,) ; popE0
$THETA (0,200.,) ; popEMAX
$THETA (.001,10,) ; popEC50
$OMEGA 0.5 ; etaE0
$OMEGA 0.5 ; etaEMAX
$OMEGA 0.5 ; etaEC50
$SIGMA 100 ; errSD
$PRED
E0=pope0*EXP(etae0)
EMAX=popemax*EXP(etaemax)
EC50=popec50*EXP(etaec50)
Y = E0 + EMAX*THEO/(THEO+EC50) + errsd
$TABLE ID TIME THEO AGE WT GEND RACE DIAG
E0 EMAX EC50 Y
NOPRINT ONEHEADER FILE=theopd.fit
</src>

On save, the =$ESTIM= record is translated to:

<src lang="esn">
$ESTIM PRINT=1 METHOD=HYBRID ZERO=(1)
</src>

This is only occurs when Emacs Speaks NONMEM handles Extended Control stream
translation is enabled.

This feature may also be toggled at:

 - Extended
   - Translate extended parameter names names in ZERO=(x)

** Changing Parameter Names
If you wish to change the =popE0= parameter name to =E0=, editing the label causes
*all* of the parameter names referenced in the document to change without any
extra effort.  This option may be toggled at:

- Extended
   - Update variable names in model blocks when updating labels in estimates

** Parameter Name Highlighting

When this option is enabled, parameter names are highlighted in the
control-stream, making them easier to identify.

This may be toggled at:

 - Extended
   - Highlight Extended Control Stream Parameter Names

** Lower case preference

When opening a normal control stream as an extended control stream, there is an
option to have the records in lower case instead of upper case;  This may be
toggled at:

 - Extended
   - When opening extended, prefer records in lower case



** Links



*** Document Hyperlinks
When using Emacs Speaks NONMEM, Emacs can hyperlink input and output
to the appropriate files.  Currently the possible options for linking
are:
 - Output Files
 - Input Files
 - MSFO Files

Each of these features can be turned on or off.

[[#links.plt][Linking for control streams under PLT tools]] requires =grep=
to be installed.  Also under windows, if
[[http://www.emacswiki.org/emacs/w32-browser.el][w32-browser]] is
present the link will open up the associated program.[8] Therefore if
your input file is a =csv= file, and =csv= files are associated with
Microsoft Excel, clicking on the input file will open that file in
Microsoft Excel.

** Output Files

Output files include =$TABLE= outputs, and FORTRAN OPEN(#,FILE='')
statements.

** Input Files

Input files are the =$DATA= statements

#links.msfo
** MSFO Files

=$ESTIMATE= records with an msfo file have a special link that:
 - Creates a copy of your control string in an empty buffer
 - Removes =$THETA=, =$OMEGA=, =$SIGMA=, and =$ESTIMATION= records.
 - Inserts a =$MSFI= record based on your msfo file.  This allows you
   create a control stream that:
   - Predict other datasets
   - Simulate other datasets
   - Resumes the model
   - etc.

** Included Files
Tools such as [[#pirana][Pirana]], copy external files to the run directory using the
following syntax:

<src lang="esn">
;INCLUDE=file_to_be_copied_1.ext, file2.ext, file3
</src>

Emacs Speaks NONMEM will link to these files if the option is enabled.

** PLT tools
#links.plt

When =grep= is installed, and you are using PLT tools, clicking on the
=AllRecords.txt=, =FirstRecords.txt=, and =ExtraRecords.txt= looks through
the appropriate directories for files that match the current control
stream and takes the most recent =csv= and links to that =csv=.



* Bugs




** Bugs
** Unresolved Bugs
Saving new simulation variables :: Upon saving, Xpose asks if new
         variables should always be added to the corresponding table.
         Unfortunately, this choice is not saved.

Improper Shrinkage Calculation :: Includes =ETA= values that are zero
    when calculating shrinkage.  Most of the time this is inconsequential.

** Resolved Bugs
** 0.13
DATE=DROP :: When DATE=DROP, and "dropping input aliases that interfere with
             NONMEM's output is enabled," this would change to DATE.  Fixed this
             to remain DATE=DROP. (Also used with DAT1, DAT2, and DAT3).
** 0.12
Multiple records per line :: According to NONMEM's user guide, there may be
                             multiple records per line.  This has been
                             added in.

Xpose R script generating -Inf errors :: Fixed log-plot issues with -Inf.

Extended variables mismatch :: When replacing an extended variable label that is the
                               same as a variable defined in one of the model
                               blocks (=$PK=, =$PRED=, etc.) and that variable is
                               defined on the same line as the model block, EsN
                               did not know that this variable was off limit for
                               substitution later.  This has been fixed.

*** 0.11
80 Character problems :: When enabling the display 80 characters **and then
  disabling it**, the 80 character highlighting remains and cannot be edited.
  Fixed in Version 0.11.

Occasional slash problems :: When files contained a period than slash, these
  slashes were changed to backward slashes occasionally in windows. Fixed in
  Version 0.11 (Due to updating file-names).

Prompting for version control when saving :: When version control is disabled
  and a new user attempts to edit the control stream, esn tries to place the
  control stream in version control. *This bug was due to menu mis-labeling*.  The
  menu has been labeled and changed according to the functions needed.  There is
  "Automatically place model under version control" and "Automatically generate
  a description for the version control."  Previously these had the same labels
  and were in different locations. This is fixed in Verison 0.11

Not detecting the correct estimation method :: When the estimation method is at
                                               the end of the =$EST= record, EsN
                                               did not calculate the correct
                                               estimation method.  Now the
                                               correct estimation has been
                                               calculated.

Not detecting certain variables :: EsN did not detect variables that are defined
  on the same line as the =$ERROR=, =$PK= and =$PRED= statements.  This has been
  resolved.

** Changes
** 0.13
 - Added support for Xmind map files.
 - Made context sensitive tool-bars.
 - Removed dependence on Ghostscript
 - Changed saving of extra files to be idle-timers so that saves take less time.
 - Changed local links to be an idle timer so that movement is not so slow.
 - Added todochiku integration to allow messages that are sent to growl, snarl,
   and libnotify.
 - Added buttons to open PLT tools output files -- bootstrapping and PDF files.
 - Added button to switch to NONMEM output file.
** 0.12
 - Changed header code to support 5 different styles of headers: (1)
   PLT tools header, (2) PDx pop header, (3) Pirana, (4) Census style
   headers, and (5) anything else.
 - Added better error handling by using lisp =save-restriction= more often.
 - Added new behavior for backspace and delete in the editable region of the
   comments.
 - Added a magic =*= key that will start a list in an editable region of the
   header.
 - Changed delete and backspace to be advised functions to conform with any
   key-binding changes that the user wishes.
 - Allowed =THETA=, =ETA=, and =EPS= to be renumbered with the explicit
   comment =THETA(1) - Comment=
 - Allowed extended control streams to ignore =THETA=, =ETA=, =EPS=, etc
   statements before variable label.
 - Changed the automatic generation of the PLT graphics script to only occur
   when:
   - There is no graphics script associated with that file.
   - If there is a graphics script, that graphics script was last generated by
     Emacs Speaks NONMEM (should have =EsN= in the comment)
 - Added [[#links][hyperlinks]] to control streams
 - Added renumbering of =A_0=.
 - Added Icons to launch or run files in NMQual, PDx pop, Census, etc.

** 0.11
 - Changed emacs to recognize NONMEM files when opend as files that start with a
   =$PROBLEM= statement (regardless of the extension).  In text files (like files
   ending with =.txt=), or with files that Emacs does not recognize, when typing
   =$PRO= at the beginning of the control stream, Emacs will then recognize the
   file as a control stream.  Note that the =.txt= extension collides with outputs
   in NONMEM 7 unless the =$ESTIMATION= step specifies a different output.
 - Changed Emacs Speaks NONMEM to autoload (only loads when a control stream is
   openend or recognized), speeding up initial Emacs load.
 - Changed Key binding menu (windows keys, emacs keys, etc.) to be a
   different file that is no longer loaded by default.
 - Added more files to version control.  These are names that are output
   by default in NONMEM 7.  Assuming a base file name of =root=, these files are:
   - =root.txt=
   - =root.cov=
   - =root.coi=
   - =root.cor=
   - =root.phi=
 - Added the new Fortran 95 operators (supported by NONMEM 7)
 - Added =.res= as a default NONMEM output file
 - Allow input to be 50 data items per record (supported by NONMEM 7)
 - Added warning highlighting if output variables are over the maximum
   specified.
 - Added highlighting (in warning face) of continuation =&= of Fortran95 that may
   be used with NONMEM 7.
 - Added different types of PRED/WRES/RES output in NONMEM 7
 - Added =ADVAN13= the new =LSODA= differential equation solver for NONMEM 7.
 - Added =SIGL= step size to =$EST= for NONMEM 7.
 - Added iterative two-stage methods (ITS), Monte-Carlo Importance Sampling
   (IMP), Monte-Carlo Importance Sampling EM assisted by Mode a Posteriori/MAP
   estimation (IMPMAP), Stochastic Approximation Expectation Maximization Method
   (SAEM), and Full Markov Chain Monte Carlo/MCMC Bayesian Analysis Method
   (BAYES) which are included in NONMEM 7.
 - Added extended control stream support of =MU= variables.
 - Moved the NONMEM assumed version to two places on the menu tree.
 - Added support for PLT tools.

** To Do
 - Automatic checks/generation for mu-variables.
 - Automatic checks/Generation of GRD for Bayes IMP/IMPMAP/SAEM errors to speed
   up calculation.
 - Automatic output of estimation files. (FO would be control-fo-01.txt,
   control-fo-02.txt, BAYES would be control-bayes-01.txt, etc. )
 -



* FAQ




** Questions about Automatic Changes

** BLOCK statements

 - When I type =BLOCK=(=3=) in an =$OMEGA= record it changes to =BLOCK=(=1=).  I need it
   to be =BLOCK=(=3=).

Emacs Speaks NONMEM numbers =BLOCK= estimates automatically, so just keep typing
the OMEGA block it will change as you add estimates.  For example

<src lang="esn">
$OMEGA BLOCK(1)
 1 ; 1 - First Eta
</src>

Will change =BLOCK=(1) to =BLOCK=(2) two when entering the "3" initial estimate below:

<src lang="esn">
$OMEGA BLOCK(2)
 1 ; 1 - First Eta
 2 3
</src>

Continuing this behavior will eventually give you the =BLOCK= you need:

<src lang="esn">
$OMEGA BLOCK(3)
 1     ; 1 - First Eta
 2 3   ; 2 - Second Edta
 4 5 6 ; 3 - Third Eta
</src>



Footnotes:


[1]  Mac OS X includes a command-line version of emacs.  However, to
     use all of Emacs' functionality it is best to use an emacs
     package such as Carbon Emacs.




Footnotes:
[2]   From Emacs Windows FAQ (http://www.gnu.org/software/emacs/windows/Other-useful-ports.html)

[3]  From AucTex Website (http://www.gnu.org/software/auctex/)

[4]  From Emacs Speaks Statistics project website (http://ess.r-project.org/)

[5]  From Emacs Muse Website (http://mwolson.org/projects/EmacsMuse.html)

[6]  From Emacs FAQ (http://www.gnu.org/software/emacs/windows/Text-and-Utility-modes.html)



[7]  This may be circumvented by using another editor other than emacs with Emacs Speaks NONMEM.



[8]  I also added code to use Xemacs' =mswindows-shell-execute=.  I
     really don't know if EsN runs on Xemacs still.


;; -*-no-byte-compile: t; -*-
(defvar esn-records-help-DAT-7 '(
		("BLANKOK" "BLANKOK\n Specifies that blank lines are permitted in the  data set. With all versions prior to NONMEM VI 2.0 a blank line was permitted, and was copied to the NONMEM data set. A warning message was issued.  With later versions,  stops with an error message when there is a blank line  in  the    data  set.   Option BLANKOK  restores  the  previous behavior.  There is no abbreviation. BLANKOK must be coded in full.")
		("TRANSLATE=" "TRANSLATE=(list)\n \"list\" describes modifications to be made to the contents of  the data file.  It may contain one of: TIME/24, TIME/24.000, TIME/24.00 and/or one of II/24, II/24.000, II/24.00. The  options involving TIME (II) can be used to convert the units of time (of the steady-state interval) from hours to  days.   The TIME  (II) data item is first processed as if the option were not present.  Then the resulting value is divided by 24. With /24  or /24.000,  three decimal places are retained in the resulting data item.  With /24.00,  two  decimal  places  are  retained  in  the resulting data item. Note: The value of TIME is divided by 24, whether or not day-time translation occurs (i.e., whether or not relative times are being computed  by  ).  Similarly, the value of II is divided by 24 whether or not \":\" appears in any II data value.")
		("LAST20=" "LAST20=n3\n Override the LAST20 constant in ABLOCK (default: -1). One or two digit years > LAST20 are assumed to be in the 1900's, One or two digit years <=LAST20 are assumed to be in the 2000's. E.g,.  suppose LAST20=50. Then two digit years are interpreted as follows:  00-50=2000-2050  51-99=1951-1999")
		("NOOPEN" "NOOPEN\n will not open the named data file.  This permits the data")
		("REWIND" "REWIND\n With  the  first  problem  specification in a control stream, the file is positioned at its initial point so that the first  data  set  in  the file is used.  The options REWIND and NOREWIND apply only with a $DATA record in a subsequent problem specification,  and  only when the file named on the record is the same as that specified for the previous problem.  When the file named  on the  record  is  different  from  that specified for the previous problem, the file is (re)positioned at its intial point  so  that the first  data set in the file is used. REWIND: Reposition the file at its intial point so that the first  data set in the file is re-used. (Whether the file input to NONMEM  itself  will  be  repositioned depends  on  whether  this  file  is FDATA or is one named in the $DATA record` see NONMEM Users Guide,  Part  IV  for  a  complete explanation.) NOREWIND: Leave the file at its current position so that the next  data set in the file is used.  The $DATA record with  the previous  problem  specification  must  have included the RECORDS option (or a FINISH record must have terminated the data set used in the previous problem), so that  did not read to a physical end-of-file.  This is the default.")
		("NOREWIND" "NOREWIND\n With  the  first  problem  specification in a control stream, the file is positioned at its initial point so that the first  data  set  in  the file is used.  The options REWIND and NOREWIND apply only with a $DATA record in a subsequent problem specification,  and  only when the file named on the record is the same as that specified for the previous problem.  When the file named  on the  record  is  different  from  that specified for the previous problem, the file is (re)positioned at its intial point  so  that the first  data set in the file is used. REWIND: Reposition the file at its intial point so that the first  data set in the file is re-used. (Whether the file input to NONMEM  itself  will  be  repositioned depends  on  whether  this  file  is FDATA or is one named in the $DATA record` see NONMEM Users Guide,  Part  IV  for  a  complete explanation.) NOREWIND: Leave the file at its current position so that the next  data set in the file is used.  The $DATA record with  the previous  problem  specification  must  have included the RECORDS option (or a FINISH record must have terminated the data set used in the previous problem), so that  did not read to a physical end-of-file.  This is the default.")
		("WIDE" "WIDE\n Requests that FDATA contain  single-line  records,  and  that  at least  one  space separate columns.  (Records in FDATA will never be wider than 300 characters.)  With this option, there  will  be no FINISH (FIN) record in the NONMEM data set.")
		("NOWIDE" "NOWIDE\n Requests that  attempt  to  limit  FDATA  to  80-character records.   Space  between  adjacent columns may be suppressed and multi-line records may be generated.  This is the default.")
		("NULL=" "NULL=c2\n Specifies that null data items in the  data set are to  be replaced  in  the  NONMEM  data  set  by the character c2.  E.g., NULL=0 or NULL=.. Null data items consist of a single dot (.) or  consecutive  commas.   c  may  be  any  character except space (\" \") or semicolon (\"`\"). Also permitted: NULL='c' or NULL=\"c\", where c may be any  character. If  this  option  is  omitted,   replaces each null with a space.")
		("ACCEPT=" "ACCEPT=(list)\n The ACCEPT list option is identical to the  IGNORE  list  option, except  that  it  specifies conditions for acceptance of records. An ACCEPT list cannot be used together with an IGNORE list.  E.g.   ACCEPT=(GEN.EQ.1,AGE.GT.60). Records  having  GEN  equal  to  1  or  AGE  greater  than 60 are accepted.  All others are dropped. Suppose it is desired that records be dropped  that  satisfy  the logical  \".AND.\"  of several conditions.  This can be implemented by using an ACCEPT list with the  negations  of  the  conditions. For  example, suppose that records to be ignored are those having GEN=1 .AND. AGE > 60.  This may be done as follows: ACCEPT=(GEN.NE.1,AGE.LE.60)")
		("IGNORE=" (
			("c1" "IGNORE=c1\n Specifies that any data record having the character c in column 1 should  be  ignored,  i.e., these records are not included in the NONMEM data set.  This allows comment records to be  included  in the  data set.  In general, records having the character c in column 1 will be called \"comment records\". Also permitted: IGNORE='c' or IGNORE=\"c\",  where  c  may  be  any character except space.  IGNORE=# is the default. IGNORE=@  signifies  that  any  data  record having an alphabetic character or @ as its first non-blank character (not just in column  1) should be ignored.  Alphabetic characters are the letters A-Z and a-z.  This permits a table file having header lines to be used as an  data set.")
			("skip" "IGNORE=(list)\n \"List\"  is  a  list of one or more data item labels, with logical operators   and    values,    of    the    form    \"label=value\", \"label.EQ.value\",       \"label.NE.value\",       \"label.GT.value\", \"label.GE.value\", \"label.LT.value\", and \"label.LE.value\".  If the logical  operator is omitted, the default is \"=\".  With each data record, the value of the data item with the given label  and  the value in the list are compared according to the logical operator, and if result is \"true\", the record is ignored, i.e.  it  is  not included in the NONMEM data set (see example below). Such records are called \"dropped records\".  With \"=\", \".EQ.\"  and  \".NE\",  the value  in  the data record and the value in the list are compared as character strings. Otherwise, they are  converted  to  numeric and  compared numerically.  This comparison is made prior to time translation. Hence, the TIME item cannot be compared  numerically if it contains non-numeric characters such as \":\". A  data  item  label  along  with a logical operator and value is called a condition.  A list may contain several conditions` these should be separated by commas, and the list should be enclosed in parentheses.  Up to 100 different conditions  altogether  can  be specified.   Multiple  IGNORE options with different lists may be used.  A list may span one or more  records.  The  use  of \"=\"  after  IGNORE is optional, but parentheses are required with this form of IGNORE.  Values may be alphabetic  or  numeric,  and may  optionally be surrounded by single quotes ' or double quotes \".  Quotes are required if a value  contains  special  characters such  as=.   However, a value may not contain spaces or commas. No format specification is permitted with this form of IGNORE. A data item type may be dropped from the NONMEM data set by means of  the  DROP or SKIP synonym on the $INPUT record, after records are dropped due to a condition  based  on  the  data  item  type. E.g.,   $INPUT ... GEN=SKIP ...   $DATA file IGNORE=(GEN='M') Records having GEN equal to 'M' will be dropped, and the GEN data item type will then be omitted  from  the  NONMEM  data  set.   A dropped  data item may be any alphanumeric string (without a data item delimiter - a blank or a comma). If there is more than one condition, then records  satisfying  at least  one  of  these conditions will be dropped.  In effect, the conditions for dropping a record are  connected  by  the  implied conjunction \".OR.\".  E.g.   IGNORE=(GEN.EQ.1,AGE.GT.60). Records having GEN equal to 1 or AGE greater than 60 are dropped. All others are accepted.")
))
		("LRECL=" "LRECL=n2\n The number of characters in a logical record.  Needed for certain operating systems (e.g., IBM/CMS).")
		("(format)" "(format)\n FORTRAN format specification to be used to read the data.  Format codes F, E, and X may be used, but not I.  When a format is  provided,  the  label  DROP  cannot be used on the $INPUT record and options WIDE and NULL may not be coded.  If omitted,  will generate a suitable FORMAT specification.")
)

"* $DATA help for NONMEM 7")

(provide 'esn-records-help-DAT-7)

(provide 'esn-nm-cookies-help-DAT-7)

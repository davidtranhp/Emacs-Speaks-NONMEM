;;; esn-plt.el --- PLT tools support under Emacs Speaks NONMEM, main file.
;;
;; Filename: esn-plt.el
;; Description: PLT tools support
;; Author: Matthew L. Fidler
;; Maintainer: Matthew L. Fidler
;; Created: Fri Jan 29 16:20:10 2010 (-0600)
;; Version: 0.1
;; Last-Updated: Thu Dec 22 17:19:52 2011 (-0600)
;;           By: Matthew L. Fidler
;;     Update #: 870
;; URL: http://esnm.sourceforge.net/
;; Keywords: Emacs Speaks NONMEM
;; Compatibility: Emacs 23.x
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;; PLT tools support.
;;
;; Under windows PLT is running when C:\Documents and
;; Settings\UserName\Application Data/PLTTools/NONMEMisRUNNING-XXX.txt exists.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change log:
;; 23-Mar-2011    Matthew L. Fidler
;;    Last-Updated: Tue Jan 18 13:42:21 2011 (-0600) #786 (us041375)
;;    Bug fix for unknown values.
;; 16-Dec-2010    Matthew L. Fidler
;;    Last-Updated: Thu Dec 16 11:23:33 2010 (-0600) #699 (Matthew L. Fidler)
;;    Changed `esn-plt-find-timestamps' to accept a file-name as well
;;    as current buffer.
;; 08-Dec-2010    Matthew L. Fidler
;;    Last-Updated: Wed Dec  8 10:47:39 2010 (-0600) #686 (Matthew L. Fidler)
;;    Took out macro code to try to fix byte-compilation issues.

;; 13-Nov-2010    Matthew L. Fidler
;;    Last-Updated: Wed Nov  3 15:30:05 2010 (-0500) #628 (Matthew L. Fidler)
;;    Move esn-use-plt outside to esn-which.
;; 29-Sep-2010    Matthew L. Fidler
;;    Last-Updated: Wed Sep 29 15:45:26 2010 (-0500) #584 (Matthew L. Fidler)
;;    Changed method to look for timestamps.  Its much faster than using grep.
;; 17-Sep-2010    Matthew L. Fidler
;;    Last-Updated: Fri Sep 17 12:55:07 2010 (-0500) #571 (Matthew L. Fidler)
;;    Moved automation scripts out of working folder into [working folder]-plta
;; 09-Sep-2010    Matthew L. Fidler
;;    Last-Updated: Thu Sep  9 11:33:25 2010 (-0500) #564 (Matthew L. Fidler)

;;    Made PLT automation script generation default to run NONMEM ONLY when no
;;    graphics script was generated by EsN.

;; 31-Aug-2010    Matthew L. Fidler
;;    Last-Updated: Tue Aug 31 10:57:37 2010 (-0500) #559 (Matthew L. Fidler)
;;Bug-fix the passing of quoted variables.
;; 31-Aug-2010    Matthew L. Fidler
;;    Last-Updated: Tue Aug 31 08:45:41 2010 (-0500) #539 (Matthew L. Fidler)
;;    Fixed double NONMEM variable labels to be unique.
;; 19-Aug-2010    Matthew L. Fidler
;;    Last-Updated: Thu Aug 19 11:29:03 2010 (-0500) #407 (Matthew L. Fidler)
;;    Tried to standardize record regular expressions.
;; 17-Jun-2010    Matthew L. Fidler
;;    Last-Updated: Thu Jun 17 12:46:54 2010 (-0500) #375 (Matthew L. Fidler)
;;    Only write automation file if it does not exist.
;; 15-Jun-2010    Matthew L. Fidler
;;    Last-Updated: Tue Jun 15 16:00:50 2010 (-0500) #372 (Matthew L. Fidler)
;;    Added a check to make sure this isn't a PLT archived file.
;; 14-Jun-2010    Matthew L. Fidler
;;    Last-Updated: Mon Jun 14 13:32:19 2010 (-0500) #158 (Matthew L. Fidler)
;;    Added option of putting WIDE in DATA automatically on save.
;; 22-Apr-2010    Matthew L. Fidler
;;    Last-Updated: Thu Apr 22 12:06:04 2010 (-0500) #139 (Matthew L. Fidler)
;;    Added EsN error handling
;; 20-Apr-2010    Matthew L. Fidler
;;    Last-Updated: Tue Apr 20 14:54:42 2010 (-0500) #137 (Matthew L. Fidler)
;;    Added Links to Bootstrap Parameters, Summaries and Graphs.
;; 16-Apr-2010    Matthew L. Fidler
;;    Last-Updated: Fri Apr 16 13:37:57 2010 (-0500) #119 (Matthew L. Fidler)
;;    Added opening of PLT generated graphics and summaries if using Windows 32.
;; 15-Apr-2010    Matthew L. Fidler
;;    Last-Updated: Thu Apr 15 16:46:54 2010 (-0500) #73 (Matthew L. Fidler)
;;    Added TAD and TSLD to AllRecords.txt file.
;; 15-Feb-2010    Matthew L. Fidler
;;    Last-Updated: Thu Feb 11 21:41:29 2010 (-0600) #69 (Matthew L. Fidler)
;;    Added CMT to default AllRecords.txt file
;; 11-Feb-2010    Matthew L. Fidler
;;    Last-Updated: Tue Feb  9 21:24:28 2010 (-0600) #47 (Matthew L. Fidler)
;;    Bug fix for opening PLT tools files.  Requires generation NOW.
;; 09-Feb-2010    Matthew L. Fidler
;;    Last-Updated: Tue Feb  9 21:12:35 2010 (-0600) #46 (Matthew L. Fidler)
;;    Made automation script creation an idle timer.
;; 08-Feb-2010    Matthew L. Fidler
;;    Last-Updated: Mon Feb  8 17:25:37 2010 (-0600) #34 (Matthew L. Fidler)
;;    Fix auto-updating of xpose.R in PLT tools directory.
;; 08-Feb-2010    Matthew L. Fidler
;;    Last-Updated: Mon Feb  8 17:18:53 2010 (-0600) #30 (Matthew L. Fidler)
;;    Had Esn-xmind.R copied to userscripts directory when Xmind is enabled.
;; 02-Feb-2010    Matthew L. Fidler
;;    Last-Updated: Tue Feb  2 16:39:11 2010 (-0600) #26 (Matthew L. Fidler)
;;    Added IWRES to default output of models.
;; 01-Feb-2010    Matthew L. Fidler
;;    Last-Updated: Mon Feb  1 17:16:52 2010 (-0600) #22 (Matthew L. Fidler)
;;    Fixed updating FirstRecords.txt with ETAx when it is present in AllRecords.txt
;; 01-Feb-2010    Matthew L. Fidler
;;    Last-Updated: Mon Feb  1 14:46:46 2010 (-0600) #9 (Matthew L. Fidler)
;;    Bug Fix for ADVAN/TRANS not being specified in model
;; 01-Feb-2010    Matthew L. Fidler
;;    Last-Updated: Mon Feb  1 10:38:58 2010 (-0600) #6 (Matthew L. Fidler)
;;    Added MSFO=msfo.outputfile customizable option.
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(declare-function esn-mode--fontlock "esn-fontlock")
(declare-function esn-narrow-rec "esn-narrow")
(declare-function esn-error "esn-exec")
(declare-function esn-input-get-header "esn-input")
(declare-function esn-get-variable-names "esn-extended")
(declare-function esn-get-time-units "esn-units")
(declare-function esn-get-concentration-units "esn-units")
(declare-function esn-get-volume-units "esn-units")
(declare-function esn-get-dose-units "esn-units")
(declare-function esn-message "esn-exec")
(declare-function esn-alert "esn-exec")

(eval-when-compile
  (require 'esn-start)
  (require 'esn-project)
  (require 'esn-options)
  (require 'esn-vars))

(require 'esn-templates)

(defface esn-plt-title-face '((t (:weight ultra-bold :height 2.0)))
  "PLT title face"
  :group 'esn-plt)

(unless (boundp 'esn-plt-title-face)
  (setq esn-plt-title-face '((t (:weight ultra-bold :height 2.0)))))

(defun esn-plt-table-rep (file &optional processed)
  "Replaces tables with PLT's last run (if present), others are replaced with actual file names."
  (let (
        (timestamps (if (esn-use-plt-p)
                        (if (esn-use-plt-archive-p)
                            (let (
                                  (buf (buffer-file-name)))
                              (if (string-match "[0-9]\\{6\\}-[0-9]\\{6\\}" (buffer-file-name))
                                  (list
                                   (match-string 0 (buffer-file-name)))
                                (list )))
                          (esn-plt-find-timestamps))
                      (list ))))
    (if (= (length timestamps) 0)
        (setq ret (esn-get-abs-dir file))
      (cond
       ( (string-match "AllRecords" file)
         (setq ret (concat (if (esn-use-plt-archive-p) "../" "")
                           "../TABLES/ALLRECORDS" pro "/AllRecords." (nth 0 timestamps) csvtxt)))
       ( (string-match "FirstRecords" file)
         (setq ret (concat (if (esn-use-plt-archive-p) "../" "")
                           "../TABLES/FIRSTRECORDS" pro "/FirstRecords." (nth 0 timestamps) csvtxt)))
       ( (string-match "ExtraRecords" file)
         (setq ret (concat (if (esn-use-plt-archive-p) "../" "")
                           "../TABLES/EXTRARECORDS" pro "/ExtraRecords." (nth 0 timestamps) csvtxt)))
       ( (string-match "cwtab.est" file)
         (setq ret (concat (if (esn-use-plt-archive-p) "../" "")
                           "../MISCELLANEOUS/CWRESIDUALS-ESTIMATES/CWRES.est." (nth 0 timestamps) ".txt")))
       ( (string-match "cwtab.deriv" file)
         (setq ret (concat (if (esn-use-plt-archive-p) "../" "")
                           "../TABLES/CWDERIV" pro "/CWRES.deriv." (nth 0 timestamps) csvtxt)))
       ( 't
         (setq ret (esn-get-abs-dir file)))))
    (symbol-value 'ret)))

(defun esn-plt-select (&optional button)
  "* Select PLT runs associated with this control stream."
  (interactive)
  (let (
        (btn (buffer-substring-no-properties
              (overlay-start button)
              (overlay-end button)))
        (run (list (save-excursion
                     (goto-char (overlay-start button))
                     (if (re-search-backward "[(]\\([0-9]\\{6\\}-[0-9]\\{6\\}\\)[)]" nil t)
                         (match-string 1)
                       nil)))))
    (cond
     ( (string= "[MODEL]" btn)
       (kill-buffer (current-buffer))
       (switch-to-buffer esn-plt-list-last-buffer)
       (find-file (concat "../TEXTFILES/CONTROL/Control." (nth 0 run) ".txt"))
       (delete-other-windows))
     ( (string= "[OUTPUT]" btn)
       (kill-buffer (current-buffer))
       (switch-to-buffer esn-plt-list-last-buffer)
       (find-file (concat "../TEXTFILES/RAWOUTPUT/Output." (nth 0 run) ".txt"))
       (delete-other-windows))
     ( (string= "[GRAPHICS]" btn)
       (kill-buffer (current-buffer))
       (switch-to-buffer esn-plt-list-last-buffer)
       (esn-plt-graphics-pdf nil nil nil run)
       (delete-other-windows))
     ( (string= "[STATISTICS]" btn)
       (kill-buffer (current-buffer))
       (switch-to-buffer esn-plt-list-last-buffer)
       (esn-plt-statistics nil run)
       (delete-other-windows))
     ( (string= "[SUMMARY]" btn)
       (kill-buffer (current-buffer))
       (switch-to-buffer esn-plt-list-last-buffer)
       (esn-plt-summary-pdf nil run)
       (delete-other-windows))
     ( (string= "[BRIEF SUMMARY]" btn)
       (kill-buffer (current-buffer))
       (switch-to-buffer esn-plt-list-last-buffer)
       (esn-plt-brief-summary-pdf nil run)
       (delete-other-windows))
     ( (string= "[RESULTS]" btn)
       (kill-buffer (current-buffer))
       (switch-to-buffer  esn-plt-list-last-buffer)
       (esn-plt-results-pdf nil run)
       (delete-other-windows)))))

(defun esn-plt-list-mode ()
  "EsN Major mode for PLT listings."
  (interactive)
                                        ;(use-local-map esn-plt-list-mode)
  (set-syntax-table text-mode-syntax-table)
  (setq local-abbrev-table
        text-mode-abbrev-table
        major-mode 'esn-plt-list-mode-mode
        mode-name "EsN-PLT-LIST")
  (set-buffer-modified-p nil)
  (setq buffer-undo-list nil)
  (run-hooks 'text-mode-hook 'esn-plt-list-mode-hook)
  (setq esn-plt-list-font-lock-keywords (esn-mode--fontlock
                                         (list '("^\\(.*\\)[ \t]*[(][0-9]\\{6\\}-[0-9]\\{6\\}[)][ \t]*$"
                                                 (1 esn-plt-title-face)))))
  (setq font-lock-defaults '(esn-plt-list-font-lock-keywords nil t))
  (font-lock-mode 1))

(defun esn-plt-munge-theta (text timestamp &optional start-at)
  "* Changes theta estimates to show what the final value turned out to be."
  (interactive)
  (let (ret (i (or start-at 1)))
    (when (file-exists-p "../.PLTToolsWorkFolder-DoNotDelete/PROJECTLOG.csv")
      (with-temp-buffer
        (insert-file-contents "../.PLTToolsWorkFolder-DoNotDelete/PARAMETERLOG.csv")
        (goto-char (point-min))
        (when (re-search-forward (format "^\"?%s.*$" timestamp) nil t)
          (setq ret (match-string 0))))
      (when ret
        (with-temp-buffer
          (insert ret)
          (goto-char (point-min))
          (while (re-search-forward "," nil t)
            (replace-match "\" \""))
          (goto-char (point-min))
          (insert "(setq ret '(\"")
          (goto-char (point-max))
          (insert "\"))")
          (eval-buffer))
        (with-temp-buffer
          (insert text)
          (goto-char (point-min))
          (while (re-search-forward "\\(?:([^)]*)\\|[0-9.]+\\)" nil t)
            (if (esn-in-comment-p)
                (goto-char (point-at-eol))
              (insert " => ")
	      (if (nth i ret)
		  (insert (nth i ret))
		(insert "Error looking up this value..."))
              (insert " ")
              (setq i (+ i 1))))
          (setq text (buffer-substring (point-min) (point-max))))))
    text))
(defun esn-plt-list-current ()
  "* Lists all runs associated with current control stream."
  (interactive)
  (setq esn-plt-list-last-buffer (current-buffer))
  (let ((timestamps (esn-plt-find-timestamps))
        (buf-name (format "*EsN: PLT runs for %s*" (buffer-file-name)))
        pt
        pt2)
    (pop-to-buffer (get-buffer-create buf-name))
    (delete-region (point-min) (point-max))
    (unless timestamps
      (insert "Could not find any completed PLT runs associated with this control-stream.\n"))
    (mapc (lambda(file)
            (when (string-match "^\\([0-9][0-9]\\)\\([0-9][0-9]\\)\\([0-9][0-9]\\)-\\([0-9][0-9]\\)\\([0-9][0-9]\\)\\([0-9][0-9]\\)$" file)
              (let (
                    (dt
                     (format-time-string "%A %e %B %Y %H:%M:%S"
                                         (encode-time (string-to-number (match-string 6 file)) ;Second
                                                      (string-to-number (match-string 5 file)) ; Minutes
                                                      (string-to-number (match-string 4 file)) ; Hour
                                                      (string-to-number (match-string 3 file)) ; Day
                                                      (string-to-number (match-string 2 file)) ; Month
                                                      (+ 2000 (string-to-number
                                                               (match-string 1 file))) ; Year
                                                      ))))
                (setq pt (point))
                (setq pt2 (point))
                (insert (format "%s (%s)" dt file))
                (insert "\n")
                (insert "[MODEL] ")
                (insert "[OUTPUT] ")
                (insert "[GRAPHICS] ")
                (insert "[STATISTICS]\n")
                (insert "[SUMMARY] ")
                (insert "[BRIEF SUMMARY] ")
                (insert "[RESULTS]\n")
                (insert (with-temp-buffer
                          (insert-file-contents (concat
                                                 "../TEXTFILES/CONTROL/Control."
                                                 file
                                                 ".txt"))
                          (goto-char (point-min))
                          (when (search-forward "by user" nil t)
                            (beginning-of-line))
                          (setq pt (point))
                          (search-forward (eval-when-compile (esn-reg-record-exp "PRO" nil)) nil t)
                          (forward-line 10)
                          (end-of-line)
                          (esn-mode--fontlock)
                          (font-lock-mode 1)
                          (concat
                           (esn-plt-munge-theta (esn-rec "THE" 't) file)
                           "\n"
                           (esn-plt-munge-theta  (esn-rec "OME" 't) file 41)
                           "\n"
                           (esn-plt-munge-theta  (esn-rec "SIG" 't) file 61)
                           "\n"
                           (buffer-substring pt (point)))))
                (insert "\n...\n\n"))))
          timestamps
          )
    (esn-plt-list-mode)
    (goto-char (point-min))
    (while (re-search-forward "\\[[A-Z ]+?\\]" nil t)
      (make-button (save-excursion
                     (backward-char (length (match-string 0)))
                     (point))
                   (point)
                   'action 'esn-plt-select
                   'keymap esn-button-mode-map))
                                        ;    (toggle-read-only)
    ))

(defun esn-plt-all ()
  "Opens all PLT items"
  (interactive)
  (condition-case nil
      (esn-plt-graphics-pdf)
    (error nil))
  (condition-case nil
      (esn-plt-brief-summary-pdf)
    (error nil))
  (condition-case nil
      (esn-plt-summary-pdf)
    (error nil))
  (condition-case nil
      (esn-plt-results-pdf)
    (error nil))
  (condition-case nil
      (esn-plt-statistics)
    (error nil)))

;;;###autoload
(defun esn-plt-add-wide ()
  "* Add WIDE keyword to $DATA"
  (when (and (esn-use-plt-p) esn-plt-add-wide-to-data)
    (save-excursion
      (save-restriction
        (let (
              (case-fold-search 't))
          (goto-char (point-min))
          (while (re-search-forward (eval-when-compile (esn-reg-record-exp "DAT" nil 't)) nil 't)
            (esn-narrow-rec)
            (goto-char (point-min))
            (unless (re-search-forward "\\<WIDE\\>" nil t)
              (goto-char (point-max))
              (skip-chars-backward " \t\n\f")
              (insert " WIDE"))
            (goto-char (point-max))
            (widen)))))))
(defun esn-plt-statistics (&optional dont-throw-error time-stamp)
  (interactive)
  (esn-plt-graphics-pdf dont-throw-error "../TEXTFILES/STATISTICS/Statistics." ".txt" time-stamp))
(defun esn-plt-results-pdf (&optional dont-throw-error time-stamp)
  "Opens most recent results PDF"
  (interactive)
  (esn-plt-graphics-pdf dont-throw-error "../PDF/RESULTS/Results." ".pdf" time-stamp))

(defun esn-plt-summary-pdf (&optional dont-throw-error time-stamp)
  "Opens most recent summary PDF"
  (interactive)
  (esn-plt-graphics-pdf dont-throw-error "../PDF/SUMMARY/Summary." ".pdf" time-stamp))

(defun esn-plt-brief-summary-pdf (&optional dont-throw-error time-stamp)
  "Opens most recent brief summary PDF"
  (interactive)
  (esn-plt-graphics-pdf dont-throw-error "../PDF/BRIEFSUMMARY/BriefSummary." ".pdf" time-stamp))

(defun esn-plt-bootstrap ()
  "* Opens all bootstraps for this model."
  (interactive)
  (condition-case nil
      (esn-plt-bootstrap-csv)
    (error nil))
  (condition-case nil
      (esn-plt-bootstrap-summary-csv)
    (error nil))
  (condition-case nil
      (esn-plt-graphics-bootstrap-pdf)
    (error nil)))
(defun esn-plt-bootstrap-csv (&optional prefix extension)
  "Opens most recent bootstrap csv"
  (interactive)
  (esn-plt-graphics-pdf nil "../BOOTSTRAP/TABLES/PARAMETERS/CombinedParameters." ".csv"))
(defun esn-plt-bootstrap-summary-csv (&optional prefix extension)
  "Opens most recent bootstrap summary csv"
  (interactive)
  (esn-plt-graphics-pdf nil "../BOOTSTRAP/TABLES/PARAMETERS/BootstrapSummary." ".csv"))

(defun esn-plt-graphics-bootstrap-pdf (&optional prefix extension)
  "Opens most recent bootstrap graphics PDF"
  (interactive)
  (esn-plt-graphics-pdf nil "../GRAPHICS/Graphics-Bootstrap." ".pdf"))

(defun esn-plt-graphics-pdf (&optional dont-throw-error prefix extension time-stamp)
  "Opens most recent graphics PDF"
  (interactive)
  (when (esn-use-plt-p)
    (when (and esn-w32 (fboundp 'w32-browser))
      (let (
            (timestamps (or time-stamp (esn-plt-find-timestamps)))
            (pre (or prefix "../GRAPHICS/Graphics."))
            (ext (or extension ".pdf"))
            last-run
            i
            )
        (if (= (length timestamps) 0)
            (message "Could not find run.  Need to submit, or make the grep command accessible to emacs")
          (setq i 0)
          (setq last-run (concat pre (nth i timestamps) ext))
          (while (and (not (= (length timestamps) i)) (not (file-exists-p last-run)))
            (if dont-throw-error
                (message "Could not find %s" last-run)
              (esn-error "Could not find %s" last-run))
            (setq i (+ i 1))
            (setq last-run (concat pre (nth i timestamps) ext)))
          (when (file-exists-p last-run)
            (setq last-run (w32-short-file-name last-run))
            (message "Found %s" last-run)
            (when esn-w32
              (while (string-match "/" last-run)
                (setq last-run (replace-match "\\" 't 't last-run))))
            (if (and esn-w32 (fboundp 'w32-browser))
                (w32-browser last-run))))))))

(defun esn-plt-tools-is-running-p ()
  "Checks to see if PLT tools is running a run currently."
  (let (
        (f (file-expand-wildcards (concat (getenv "APPDATA") "/PLTTools/NONMEMisRUNNING*")))
        (ret nil))
    (if (and (= 1 (length f)) (file-exists-p (nth 0 f)))
        (setq ret 't))
    (symbol-value 'ret)))

(defun esn-plt-run-queue ()
  (unless (esn-plt-tools-is-running-p)))


(defun esn-plt-hl (&optional a num-cmt)
  "Creates the portion of the script that determines if
half-lives will be calculated and how many compartments"
  (let (
        (advan (or a (esn-advan)))
        (calc-hl nil)
        (max-theta (esn-max-theta))
        (max-eta (esn-max-eta))
        (ret ""))
    (setq advan (or advan -1))
    (set num-cmt
         (cond
          ( (or (= advan 11)
                (= advan 12)) 3)
          ( (or (= advan 3)
                (= advan 4)) 2)
          ( 't
            1)))
    (setq calc-hl (not
                   (or
                    (= advan 5)
                    (= advan 6)
                    (= advan 7)
                    (= advan 8)
                    (= advan 9)
                    (= advan 10)
                    (= advan 13))))
    (setq ret (format "CalculateHalfLives        <- c(%s)
NumberOfCompartments     <- c(%s)" (if calc-hl "T" "F") num-cmt))
    (symbol-value 'ret)))

(defun esn-plt-fix-labels (labs)
  "Fixes variable labels to be more human readable..."
  (let (
        (ret labs))
    (setq ret (mapcar (lambda(x)
                        (let (
                              (r x))
                          (while (string-match "THETA([0-9]+)" r)
                            (setq r (replace-match "" nil nil r)))
                          (while (string-match "THETA[0-9]+" r)
                            (setq r (replace-match "" nil nil r)))
                          (when (string-match "^[^A-Za-z]*" r)
                            (setq r (replace-match "" nil nil r)))
                          (when (string-match ";.*" r)
                            (setq r (replace-match "" nil nil r)))
                          (while (string-match (regexp-opt esn-plt-rm-from-label 'words) r)
                            (setq r (replace-match "" nil nil r)))
                          (while (string-match "\\<\\(OMEGA\\|THETA\\|SIGMA\\|ETA\\|EPS\\|ERR\\)[0-9]+" r)
                            (setq r (replace-match "" nil nil r)))
                          (while (string-match "[ \t][ \t]+" r)
                            (setq r (replace-match " " nil nil r)))
                          (when (string-match "^[ \t]*" r)
                            (setq r (replace-match "" nil nil r)))
                          (when (string-match "[ \t]*$" r)
                            (setq r (replace-match "" nil nil r)))
                          (symbol-value 'r)))
                      ret))
    (symbol-value 'ret)))



(defun esn-plt-ca-cov (v codes text rep
                         ret-q) ; Quoted
  "* Gets categorical covariate, and replaces categories in ret-q, and returns description.
V=Value from input description
Codes= PLT codes
text = PLT test
rep = Script rep place."
  (let (
        (val v)
        (tmp2 nil)
        (tmp1 nil)
        (tmp3 nil)
        (var-lst '())
        (val-lst '())
        (txt ""))
    (when (string-match "(\\( *[0-9][0-9.]* *[:=] *[^ ].*?\\))" val)
      (setq tmp3 (match-string 1 v))
      (setq val (replace-match "" 't 't val))
      (with-temp-buffer
        (insert tmp3)
        (goto-char (point-min))
        (while (re-search-forward " *\\([0-9][0-9.]*\\) *[:=] *\\([^:=]*\\)\\([0-9]\\)" nil t)
          (setq tmp2 (match-string 1))
          (setq tmp3 (match-string 2))
          (replace-match "\\3")
          (goto-char (point-min))
          (while (string-match "[;., ]+$" tmp3)
            (setq tmp3 (replace-match "" nil nil tmp3)))
          (setq val-lst (push tmp2 val-lst))
          (setq var-lst (push tmp3 var-lst))
          (when (re-search-forward " *\\([0-9]+\\) *[:=] *\\(.*\\)")
            (setq tmp2 (match-string 1))
            (setq tmp3 (match-string 2))
            (while (string-match "[;., ]+$" tmp3)
              (setq tmp3 (replace-match "" nil nil tmp3)))
            (setq val-lst (push tmp2 val-lst))
            (setq var-lst (push tmp3 var-lst)))))
      (setq txt
            (format
             "%s         <- c(%s)\n%s    <- c(\"%s\")"
             codes (mapconcat (lambda(x) x) val-lst ", ")
             text (mapconcat (lambda(x) x) var-lst "\", \"")))
      (when (string-match (regexp-quote rep) (symbol-value ret-q))
        (set ret-q (replace-match txt nil nil (symbol-value ret-q))))
      (symbol-value 'val))))
(defun esn-plt-covs-1 (
                                        ;Unquoted
                       demo-alias
                       id-covs
                       ca-covs
                       co-covs
                                        ; Quoted
                       tmp1-q tmp2-q tmp3-q i-q
                       col-names-q col-desc-q col-glm-q col-type-q
                       age-covs-q weight-covs-q height-covs-q dose-group-q
                       gender-covs-q race-covs-q form-covs-q fed-covs-q
                       ret-q
                       )
  "* Subroutine of PLT covs called twice."
  (cond
   ( (string-match id-covs (symbol-value tmp1-q))
     ;; Skip ID variables.
     )
   ( (and (symbol-value age-covs-q) (string-match (symbol-value age-covs-q) (symbol-value tmp1-q)))
     (when (assoc (symbol-value tmp1-q) demo-alias)
       (set tmp1-q (cadr (assoc (symbol-value tmp1-q) demo-alias))))
     ;; Age Covariate
     (set col-names-q (push (symbol-value tmp1-q) (symbol-value col-names-q)))
     (set col-desc-q (push (symbol-value tmp2-q) (symbol-value col-desc-q)))
     (set col-glm-q (push "T" (symbol-value col-glm-q)))
     (set col-type-q (push "Age" (symbol-value col-type-q)))
     (set age-covs-q nil))
   ( (and (symbol-value weight-covs-q)
          (string-match (symbol-value weight-covs-q) (symbol-value tmp1-q)))
     (when (assoc (symbol-value tmp1-q) demo-alias)
       (set tmp1-q (cadr (assoc (symbol-value tmp1-q) demo-alias))))
     ;; Weight
     (set col-names-q (push (symbol-value tmp1-q) (symbol-value col-names-q)))
     (set col-desc-q (push (symbol-value tmp2-q) (symbol-value col-desc-q)))
     (set col-glm-q (push "T" (symbol-value col-glm-q)))
     (set col-type-q (push "Weight" (symbol-value col-type-q)))
     (set weight-covs-q nil))
   ( (and (symbol-value height-covs-q) (string-match (symbol-value height-covs-q) (symbol-value tmp1-q)))
     ;; Height
     (when (assoc (symbol-value tmp1-q) demo-alias)
       (set tmp1-q (cadr (assoc (symbol-value tmp1-q) demo-alias))))
     (set col-names-q (push (symbol-value tmp1-q) (symbol-value col-names-q)))
     (set col-desc-q (push (symbol-value tmp2-q) (symbol-value col-desc-q)))
     (set col-glm-q (push "T" (symbol-value col-glm-q)))
     (set col-type-q (push "Height" (symbol-value col-type-q)))
     (set height-covs-q nil))
   ( (and (symbol-value dose-group-q) (string-match (symbol-value dose-group-q) (symbol-value tmp1-q)))
     ;; Dose Group.
     (when (assoc (symbol-value tmp1-q) demo-alias)
       (set tmp1-q (cadr (assoc (symbol-value tmp1-q) demo-alias))))

     (set col-names-q (push (symbol-value tmp1-q) (symbol-value col-names-q)))
     (set col-desc-q (push (symbol-value tmp2-q) (symbol-value col-desc-q)))
     (set col-glm-q (push "T" (symbol-value col-glm-q)))
     (set col-type-q (push "DoseGroup" (symbol-value col-type-q)))
     (set dose-group-q nil))
   ( (and (symbol-value gender-covs-q) (string-match (symbol-value gender-covs-q) (symbol-value tmp1-q)))
     ;; Gender Covariate
     (when (assoc (symbol-value tmp1-q) demo-alias)
       (set tmp1-q (cadr (assoc (symbol-value tmp1-q) demo-alias))))

     (set col-names-q (push (symbol-value tmp1-q) (symbol-value col-names-q)))
     (set col-desc-q (push (esn-plt-ca-cov (symbol-value tmp2-q) "GenderCodes" "GenderText" "-GENDER-" ret-q) (symbol-value col-desc-q)))
     (set col-glm-q (push "T" (symbol-value col-glm-q)))
     (set col-type-q (push "Gender" (symbol-value col-type-q)))
     (set gender-covs-q nil))
   ( (and (symbol-value race-covs-q) (string-match (symbol-value race-covs-q) (symbol-value tmp1-q)))
     (when (assoc (symbol-value tmp1-q) demo-alias)
       (set tmp1-q (cadr (assoc (symbol-value tmp1-q) demo-alias))))
     ;; Race Covariates
     (set col-names-q (push (symbol-value tmp1-q) (symbol-value col-names-q)))
     (set col-desc-q (push (esn-plt-ca-cov (symbol-value tmp2-q) "RaceCodes" "RaceText" "-RACE-" ret-q) (symbol-value col-desc-q)))
     (set col-glm-q (push "T" (symbol-value col-glm-q)))
     (set col-type-q (push "Race" (symbol-value col-type-q)))
     (set race-covs-q nil))
   ( (and (symbol-value form-covs-q) (string-match (symbol-value form-covs-q) (symbol-value tmp1-q)))
     ;; Formulation Covariates
     (when (assoc (symbol-value tmp1-q) demo-alias)
       (set tmp1-q (cadr (assoc (symbol-value tmp1-q) demo-alias))))

     (set col-names-q (push (symbol-value tmp1-q) (symbol-value col-names-q)))
     (when (string-match "-FORMULATION-STATUS-NAME-" (symbol-value ret-q))
       (replace-match (symbol-value tmp1-q)))
     (set col-desc-q (push (esn-plt-ca-cov (symbol-value tmp2-q) "DisplayFormulationCodes" "DisplayFormulationText" "-FORMULATION-" ret-q) (symbol-value col-desc-q)))
     (set col-glm-q (push "T" (symbol-value col-glm-q)))
     (set col-type-q (push "Categorical" (symbol-value col-type-q)))
     (set form-covs-q nil))
   ( (and (symbol-value fed-covs-q) (string-match (symbol-value fed-covs-q) (symbol-value tmp1-q)))
     ;; Fed/Fasted Covariates
     (when (assoc (symbol-value tmp1-q) demo-alias)
       (set tmp1-q (cadr (assoc (symbol-value tmp1-q) demo-alias))))

     (set col-names-q (push (symbol-value tmp1-q) (symbol-value col-names-q)))
     (when (string-match "-FED-STATUS-NAME-" (symbol-value ret-q))
       (set ret-q (replace-match (symbol-value tmp1-q) nil nil (symbol-value ret-q))))
     (set col-desc-q (push (esn-plt-ca-cov (symbol-value tmp2-q) "DisplayFedCodes" "DisplayFedText" "-FED-" ret-q) (symbol-value col-desc-q)))
     (set col-glm-q (push "T" (symbol-value col-glm-q)))
     (set col-type-q (push "Categorical" (symbol-value col-type-q)))
     (set fed-covs-q nil))
   ( (string-match ca-covs (symbol-value tmp1-q))
     (when (assoc (symbol-value tmp1-q) demo-alias)
       (set tmp1-q (cadr (assoc (symbol-value tmp1-q) demo-alias))))

     (set tmp3-q (cond ( (= i-q 0)
                         "SpaghettiGroup"
                         )
                       ( (= i-q 1)
                         "BySubjectGroup"
                         )
                       ( (= i-q 2)
                         "Group3"
                         )
                       ( 't
                         nil
                         )))

     (set col-names-q (push (symbol-value tmp1-q) (symbol-value col-names-q)))
     (if (not (symbol-value tmp3-q))
         (progn
           (set col-desc-q (push (symbol-value tmp2-q) (symbol-value col-desc-q))))
       ;; Now replace names.
       (when (string-match (concat "-" (upcase tmp3-q) "-LABEL-") (symbol-value ret-q))
         (set ret-q (replace-match  (symbol-value tmp2-q) 't 't (symbol-value ret-q))))
       (when (string-match (concat "-" (upcase tmp3-q) "-VARIABLE-") (symbol-value ret-q))
         (set ret-q (replace-match  (symbol-value tmp2-q) 't 't (symbol-value ret-q))))
       (set tmp2-q (esn-plt-ca-cov (symbol-value tmp2-q) (concat tmp3-q "Codes")
                                   (concat tmp3-q "Text")
                                   (concat "-" (upcase tmp3-q) "-")
                                   ret-q
                                   ))
       (set col-desc-q (push (symbol-value tmp2-q) (symbol-value col-desc-q))))
     (set col-glm-q (push "T" (symbol-value col-glm-q)))
     (set col-type-q (push "Categorical" (symbol-value col-type-q)))
     (set i-q (+ (symbol-value i-q) 1)))
   ( (string-match co-covs (symbol-value tmp1-q))
     (when (assoc (symbol-value tmp1-q) demo-alias)
       (set tmp1-q (cadr (assoc (symbol-value tmp1-q) demo-alias))))
     (set col-names-q (push (symbol-value tmp1-q) (symbol-value col-names-q)))
     (set col-desc-q (push (symbol-value tmp2-q) (symbol-value col-desc-q)))
     (set col-glm-q (push "T" (symbol-value col-glm-q)))
     (set col-type-q (push "Continuous" (symbol-value col-type-q))))))
(defun esn-plt-empty-covs (
                           ret-q) ;quoted
  "Creates Empty definitions for undefined covariates."
  (mapc (lambda(x)
          (when (string-match x (symbol-value ret-q))
            (set ret-q (replace-match "" 't 't (symbol-value ret-q)))))
        (list
         "-FORMULATION-STATUS-NAME-"
         "-FED-STATUS-NAME-"
         "-SPAGHETTIGROUP-LABEL-"
         "-SPAGHETTIGROUP-VARIABLE-"
         "-BYSUBJECTGROUP-LABEL-"
         "-BYSUBJECTGROUP-VARIABLE-"
         "-GROUP3-LABEL-"
         "-GROUP3-VARIABLE-"
         ))

  (mapc
   (lambda (x)
     (let (
           (codes (nth 0 x))
           (text (nth 1 x))
           (what (nth 2 x))
           (tmp ""))
       (setq tmp
             (format
              "%s <- c(\"\")\n%s <- c(\"\")\n"
              codes
              text))
       (when (string-match what (symbol-value ret-q))
         (set ret-q (replace-match tmp 't 't (symbol-value ret-q))))))
   (list
    (list "DisplayFormulationCodes" "DisplayFormulationText" "-FORMULATION-")
    (list "DisplayFedCodes" "DisplayFedText" "-FED-")
    (list "SpaghettiGroupCodes" "SpaghettiGroupText" "-SPAGHETTIGROUP-")
    (list "BySubjectGroupCodes" "BySubjectGroupText" "-BYSUBJECTGROUP-")
    (list "Group3Codes" "Group3Text" "-GROUP3-")
    (list  "GenderCodes" "GenderText" "-GENDER-")
    (list "RaceCodes" "RaceText" "-RACE-"))))
(defun esn-plt-covs (cr inp-q demo-alias)
  "Gets the Covariate section of the PLT graphics script."
  (let* (
         (age-covs (regexp-opt esn-plt-age-covs 'words))
         (weight-covs (regexp-opt esn-plt-weight-covs 'words))
         (height-covs (regexp-opt esn-plt-height-covs 'words))
         (dose-group  (regexp-opt esn-plt-dose-covs 'words))
         (co-covs (regexp-opt esn-xpose-cotab 'words))
         
         (race-covs (regexp-opt esn-plt-race-covs 'words))
         (gender-covs (regexp-opt esn-plt-gender-covs 'words))
         (form-covs (regexp-opt esn-plt-formulation-covs 'words))
         (fed-covs (regexp-opt esn-plt-fed-covs 'words))
         
         (ca-covs (regexp-opt esn-xpose-catab 'words))
         (id-covs (regexp-opt esn-xpose-ids 'words))
         
         (col-names '())
         (col-type '())
         (col-desc '())
         (col-glm '())
         (tmp1 "")
         (tmp2 "")
         (tmp3 "")
         (covs "")
         (ret cr)
         (i 0))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "^;[|C]? *\\([A-Z0-9a-z]\\{1,4\\}\\):[ \t]*\\(.+\\)" nil t)
        (setq tmp1 (match-string 1))
        (setq tmp2 (match-string 2))
        (esn-plt-covs-1 demo-alias id-covs ca-covs co-covs 'tmp1 'tmp2 'tmp3 'i 'col-names 'col-desc 'col-glm 'col-type
                        'age-covs 'weight-covs 'height-covs 'dose-group 'gender-covs 'race-covs 'form-covs 'fed-covs
                        'ret)))
    ;; Now get the input values not already added to the col-names variable.
    (mapc
     (lambda(tmp1)
       (unless (string-match (regexp-opt col-names 'words) tmp1)
         ;; Now get tmp2.
         (if (assoc tmp1 esn-variable-labels)
             (setq tmp2 (cadr (assoc tmp1 esn-variable-labels)))
           (setq tmp2 tmp1))
         (esn-plt-covs-1 demo-alias id-covs ca-covs co-covs 'tmp1 'tmp2 'tmp3 'i 'col-names 'col-desc 'col-glm 'col-type
                         'age-covs 'weight-covs 'height-covs 'dose-group 'gender-covs 'race-covs 'form-covs 'fed-covs
                         'ret)))
     (symbol-value inp-q))
    (setq covs
          (format
           "COVARColNames        <- c(\"%s\")\nCOVARDescriptors  <- c(\"%s\")\nCOVARType         <- c(\"%s\")\nCOVARGLM  <- c(%s)"
           (mapconcat (lambda(x) x) col-names "\", \"")
           (mapconcat (lambda(x) x) col-desc "\", \"")
           (mapconcat (lambda(x) x) col-type "\", \"")
           (mapconcat (lambda(x) x) col-glm ", ")))
    (when (string-match "-COVS-" ret)
      (setq ret (replace-match covs 't 't ret)))
    (esn-plt-empty-covs 'ret)
    (symbol-value 'ret)))
(defun esn-plt-eta (et)
  "Gets the ETA section of the PLT graphics script."
  (let* (
         (esn-var-names '())
         (ens (esn-get-variable-names "OME"))
         (eta-numbers '())
         (eta-parms '())
         (i 0)
         (exp-eta
          (mapcar
           (lambda(x)
             (setq i (+ 1 i))
             (save-excursion
               (goto-char (point-min))
               (if (re-search-forward (if (string= "" x)
                                          (format "\\<D?EXP(.*?\\<ETA(%s).*?)" i)
                                        (format "\\<D?EXP(.*?\\<\\(%s\\>\\|ETA(%s)\\).*?)" x i)) nil t)
                   "T"
                 "F"
                 )))
           ens
           )))
    (setq i 0)
                                        ;    (message "Len: %s" (length ens))
    (if (= (length ens) 0)
        "ETANUMBERS      <- c()\nETAPARAMS       <- c()\nEXPETA  <- c()"
      (format "ETANUMBERS        <- c(%s)\nETAPARAMS     <- c(\"%s\")\nEXPETA    <- c(%s)"
              (mapconcat (lambda(x) (setq i (+ 1 i)) (number-to-string i)) ens ", ")
              (mapconcat (lambda(x) x) ens "\", \"")
              (mapconcat (lambda(x) x) exp-eta ", ")))))
(defun esn-plt-theta (th num-cmt hl)
  "* Get Theta portion of Graphics script"
  (let* (
         (esn-var-names '())
         (ret "")
         (tn "THETANUMBER        <- c(\"")
         (pnm "PARAMNONMEM       <- c(\"")
         (pnm-lst '())
         (hl-txt "HALFLIVES      <- c(\"")
         (hl-lst '())
         (pn "PARAMNAMES         <- c(\"")
         (pn-lst '())
         (tns (esn-get-variable-names "THE"))
         (tmp "")
         (tmp2 "")
         (tmp3 "")
         (i 0)
         (j 0)
         (tmp-lst '())
         (tmp-lst2 '())
         (time (esn-get-time-units))
         (conc (esn-get-concentration-units))
         (vol (esn-get-volume-units))
         (dose (esn-get-dose-units))
         (advan (esn-advan))
         (trans (esn-trans))
         (hl-correct nil)
         (i 1))
    (unless trans
      (setq trans 1))
    (setq tn (concat tn (mapconcat
                         (lambda(x)
                           (setq tmp "")
                           (when (nth i tns)
                             (unless (string= "" (nth i tns))
                               (setq tmp (nth i tns))))
                           (setq i (+ i 1))
                           (if (string= "" tmp)
                               (setq tmp (format "[ \t]*\\([^ \t\n]+\\)[ \t]*=.*\\<THETA(%s).*" i))
                             (setq tmp (format "[ \t]*\\([^ \t\n]+\\)[ \t]*=.*\\(?:\\<THETA(%s)\\|\\<%s\\>\\).*" i tmp)))
                           (save-excursion
                             (goto-char (point-min))
                             (when (re-search-forward tmp nil t)
                               (setq tmp2 (match-string 1))
                               (setq tmp3 (upcase tmp2))
                               (when (string-match "^TV?\\(.+\\)" tmp3)
                                 (setq tmp3 (replace-match "\\1" nil nil tmp3)))
                               (when (or (and advan trans (= 2 advan) (= trans 2))
                                         (and advan trans (= 4 advan) (= trans 4))
                                         (and advan trans (= 12 advan) (= trans 4)))
                                 ;; First order absorption models
                                 (when (string= tmp3 "V2")
                                   (setq tmp3 "VC"))
                                 (when (string= tmp3 "V3")
                                   (if (and advan (= 4 advan))
                                       (setq tmp3 "VP")
                                     (setq tmp3 "VP1")))
                                 (when (string= tmp3 "V4")
                                   (setq tmp3 "VP2"))
                                 (when (string= tmp3 "Q2")
                                   (setq tmp3 "Q1"))
                                 (when (string= tmp3 "Q3")
                                   (setq tmp3 "Q2"))
                                 (when (string= tmp3 "Q4")
                                   (setq tmp3 "Q3")))
                               (when (or (and advan trans (= 1 advan) (= trans 2))
                                         (and advan trans (= 3 advan) (= trans 4))
                                         (and advan trans (= 11 advan) (= trans 4)))
                                 ;; IV/Bolus models
                                 (when (string= "V1" tmp3)
                                   (setq tmp3 "VC"))
                                 (when (string= "V2" tmp3)
                                   (if (and advan (= 3 advan))
                                       (setq tmp3 "VP")
                                     (if (= 11 advan)
                                         (and advan (setq tmp3 "VP1")))))
                                 (when (and (string= "V3" tmp3)
                                            (and advan (= 11 advan)))
                                   (setq tmp3 "VP2")))
                               (setq pn-lst
                                     (push
                                      (if esn-plt-use-labels
                                          (if (string-match "^[ \t]*$" (nth (- i 1) th))
                                              (format "%s" tmp3)
                                            (format "%s"  (nth (- i 1) th)))
                                        (if (assoc tmp3 esn-variable-labels)
                                            (progn
                                              (if (string-match "^K" tmp3)
                                                  (format "%s (1/%s)" (cadr (assoc tmp3 esn-variable-labels)) time)
                                                (if (string-match "^V[^M]" tmp3)
                                                    (format "%s (%s)" (cadr (assoc tmp3 esn-variable-labels)) vol)
                                                  (if (string-match "^\\(CL\\|Q\\)" tmp3)
                                                      (format "%s (%s/%s)" (cadr (assoc tmp3 esn-variable-labels)) vol time)
                                                    (format "%s" (cadr (assoc tmp3 esn-variable-labels)))))))
                                          (if (string-match "^[ \t]*$" (nth (- i 1) th))
                                              (format "%s" tmp3)
                                            (format "%s"  (nth (- i 1) th))))) pn-lst
                                            ))
                               (setq pnm-lst (push tmp2 pnm-lst))
                               (if (not (string-match "^\\(CL\\|Q\\|V[^M]\\)" tmp2))
                                   (setq hl-lst (push "--" hl-lst))
                                 (setq hl-lst (push tmp2 hl-lst))
                                 (setq hl-correct 't))))
                           (number-to-string i))
                         th
                         "\", \"")
                     "\")"))
    (setq pn (concat pn (mapconcat (lambda(x) x) (reverse pn-lst) "\", \"") "\")"))
    ;; Code to drop duplicate names.  Name duplicates like W:
    ;; W1 and W2.  This occurs in additive+proportional error model such as:
    ;;   W     = SQRT(THETA(4)**2+THETA(5)**2*IPRED**2)
    (setq tmp-lst '("!"))
    (setq tmp-lst2 '())
    (mapc
     (lambda(x)
       (when (and (string-match (format "^%s$" (regexp-opt tmp-lst 'words)) x))
         (add-to-list 'tmp-lst2 x))
       (add-to-list 'tmp-lst x))
     pnm-lst
     )
    (setq i 1)
    (unless (= 0 (length tmp-lst2))
      (setq pnm-lst (mapcar
                     (lambda(x)
                       (let (ret)
                         (if (not (string-match (format "^%s$" (regexp-opt tmp-lst2 'words)) x))
                             (setq ret x)
                           (setq ret (format "%s%s" x i))
                           (setq i (+ i 1)))
                         (symbol-value 'ret)))
                     (reverse pnm-lst))))
    (setq pnm (concat pnm (mapconcat (lambda(x) x)  pnm-lst "\", \"") "\")"))
    (setq tmp-lst (append hl-lst '()))
    (sort tmp-lst 'string<)
    (setq i 0)
    (setq j 0)
    (mapc (lambda(x)
            (when (string-match "^V" x)
              (setq i (+ i 1))
              (setq hl-lst (mapcar (lambda(y)
                                     (if (string= x y)
                                         (if (<= i  num-cmt )
                                             (format "V%s" i)
                                           "--"
                                           )
                                       y
                                       ))
                                   hl-lst
                                   )))
            (when (string-match "^\\(CL\\|Q\\)" x)
              (setq j (+ j 1))
              (setq hl-lst (mapcar (lambda(y)
                                     (if (string= x y)
                                         (if (<= j num-cmt )
                                             (format "CL%s" j)
                                           "--"
                                           )
                                       y
                                       ))
                                   hl-lst
                                   ))))
          tmp-lst
          )
    (setq hl-txt (concat hl-txt (mapconcat (lambda(x) x) (reverse hl-lst) "\", \"") "\")"))

    (setq ret (concat tn "\n" pnm "\n" hl-txt "\n" pn))
    (unless hl-correct
      (setq hl "CalculateHalfLives       <- c(F)
NumberOfCompartments     <- c(1)" ))
    (symbol-value 'ret)))


(defun esn-plt-auto-now ( &optional force)
  "* Auto Timer NOW."
  (interactive)
  (when esn-plt-auto-timer
    (cancel-timer esn-plt-auto-timer)
    (when (eq major-mode 'esn-mode)
      (esn-plt-auto-actual)))
  (when (eq major-mode 'esn-mode)
    (let ((plta (esn-get-plta-name)))
      (when (not (file-exists-p plta))
        (esn-plt-auto-actual))
      (symbol-value 'plta))))
(defun esn-plt-auto ()
  "Start esn plt auto timer"
  (when esn-plt-auto-timer
    (cancel-timer esn-plt-auto-timer))
  (setq esn-plt-auto-timer (run-with-idle-timer 4 nil 'esn-plt-auto-actual)))

(defun esn-plt-auto-actual ()
  "Creates an automation object that allows Emacs Speaks NONMEM
to run PLT Tools.  Returns automation script."
  (interactive)
  (unless (esn-use-plt-archive-p)
    (save-restriction
      (let (
            (ess-nuke-trailing-whitespace-p nil) ; Bug Fix for PLT tools when Emacs
                                        ; Speaks Statistics is used.
                                        ; Allows graphics scripts to be
                                        ; created correctly.  DemoFile must have a space after it...
            (work (buffer-file-name))
            (file "")
            (graphics (if esn-plt-gen-graphics
                          (esn-plt-graphics)
                        ""))
            (esn-script (concat esn-path "etc/UserDefinedScript.R"))
            (esn-script-2 (concat esn-path "etc/UserScript.R"))
            (esn-plt-sum-link (concat esn-path "etc/esn-plt-sum-link.exe"))
            ;;            (esn-shared (concat esn-path "esn/esn-shared.R"))
            ;;            (esn-xpose-plt (concat esn-path "esn/xpose-plt.R"))
            ;;            (esn-xmind (concat esn-path "esn/esn-xmind.R"))
            ;;            (esn-xpose-summary (concat esn-path "esn/esn-xpose-summary.R"))
            (esn-dot (concat esn-path "etc/savepassword.vbs"))
            (esn-plt-lib (file-expand-wildcards (concat esn-path "plt/*.R")))
            (controlstream "")
            (plta "")
            (pltg "")
            (advan (esn-advan))
            (cst-graph nil)
            (tmp ""))
        (when esn-w32
          (setq esn-script (w32-short-file-name esn-script))
          (setq esn-script-2 (w32-short-file-name esn-script-2))
          (setq esn-shared (w32-short-file-name esn-shared))
          (setq esn-dot (w32-short-file-name esn-dot))
          (setq esn-plt-sum-link (w32-short-file-name esn-plt-sum-link))
          (setq esn-xmind (w32-short-file-name esn-xmind)))
        (when esn-plt-use-userscript
          (unless (file-exists-p "../USERSCRIPTS")
            (make-directory "../USERSCRIPTS"))
          ;;; Make a local copy of the script.
          (unless (file-exists-p "../USERSCRIPTS/UserScript.R")
            (copy-file esn-script-2 "../USERSCRIPTS/UserScript.R")
            (save-window-excursion
              (set-buffer (find-file-noselect "../USERSCRIPTS/UserScript.R"))
              (goto-char (point-min))
              (while (re-search-forward "^ *esn.path.*" nil t)
                (replace-match (format "esn.path <- \"%s\";" esn-path)))
              (save-buffer (current-buffer))
              (kill-buffer (current-buffer))))
          (unless (file-exists-p "../USERSCRIPTS/UserDefinedScript.R")
            (copy-file esn-script "../USERSCRIPTS/UserDefinedScript.R"))
          (when esn-w32
            (unless (file-exists-p "../USERSCRIPTS/esn-plt-sum-link.exe")
              (copy-file esn-plt-sum-link "../USERSCRIPTS/esn-plt-sum-link.exe")))
          ;; Now put in the other files
          (unless (file-exists-p "../USERSCRIPTS/lib" )
            (make-directory "../USERSCRIPTS/lib"))
          ;; (when esn-plt-gen-xpose-plt
          ;;   (unless (file-exists-p "../USERSCRIPTS/xpose-plt.R")
          ;;     (copy-file esn-xpose-plt "../USERSCRIPTS/xpose-plt.R")
          ;;     )
          ;;   (unless (file-exists-p "../USERSCRIPTS/esn-xpose-summary.R")
          ;;     (copy-file esn-xpose-summary "../USERSCRIPTS/esn-xpose-summary.R")
          ;;     )
          ;;   )
          (mapc (lambda(x)
                  (if (string-match "html\\.R$" x)
                      (copy-file x "../USERSCRIPTS/html.R" 't)
                    (let (
                          (y x))
                      (when (string-match ".*[\\\\/]\\([^\\\\/]*\\)$" y)
                        (setq y (replace-match (match-string 1 y) 't 't y)))
                      (unless (file-exists-p (concat "../USERSCRIPTS/lib/" y))
                        (copy-file x (concat "../USERSCRIPTS/lib/" y) 't 't 't)
                        (when (string-match "xpose.R" x)
                          (save-window-excursion
                            (set-buffer (find-file-noselect "../USERSCRIPTS/lib/xpose.R"))
                            (goto-char (point-min))
                            (when (re-search-forward ".*xpsm.ord.*" nil t)
                              (beginning-of-line)
                              (when (search-forward "\\.*\\<list(" nil t)
                                (backward-char 1)
                                (delete-region (point) (save-excursion (forward-list 1) (point))))
                              (goto-char (point-min))
                              (when (re-search-forward ".*xpsm.ord.*" nil t)
                                (replace-match "")
                                (insert (esn-mode-xpose-gen-xpsm-ord))))
                            (save-buffer (current-buffer))
                            (kill-buffer (current-buffer))))))))
                esn-plt-lib
                ))
        (setq tmp "")
        (when (string-match "\\([/\\\\]\\)\\([^/\\\\]+\\)\\([/\\\\]\\)\\([^/\\\\]+\\)$" work)
          (setq file (match-string 4 work))
          (setq tmp (match-string 2 work))
          (setq work (replace-match "\\1\\2\\3" nil nil work))
          (with-temp-buffer
            (insert tmp)
            (goto-char (point-min))
            (while (re-search-forward "\\W+" nil t)
              (replace-match "-"))
            (setq tmp (buffer-substring (point-min) (point-max))))
          (when (string-match "^-" tmp)
            (setq tmp (replace-match "" nil nil tmp)))
          (when (string-match "-$" tmp)
            (setq tmp (replace-match "" nil nil tmp)))
          (setq tmp (concat "-" tmp)))
        ;; PLT Graphics
        (setq pltg file)
        (when (string-match "[.][^.]*$" pltg)
          (setq pltg (replace-match (concat tmp ".pltg") nil nil pltg)))
        (setq work
              (if esn-w32
                  (w32-short-file-name work)
                work
                ))
        (when (and esn-plt-gen-graphics (string-match "-PATH-" graphics))
          (setq graphics (replace-match (expand-file-name (concat work "../SCRIPTS-GRAPHICS/")) 't 't graphics)))
        (when esn-w32
          (while (string-match "/" work)
            (setq work (replace-match "\\\\" nil nil work))))
        ;; PLT
        (setq plta (esn-get-plta-name))
        (unless (file-exists-p plta)
          (with-temp-buffer
            (insert (format "# This automation script is created with EsN %s\n" esn-mode-ver))
            (insert "SET WARNINGS CRITICAL\n")
            (insert (format "SET WORKINGFOLDER %s\n" work))
            (insert (format "SET CONTROLSTREAM %s\n" file))
            (when esn-plt-gen-graphics
              (insert (format "SET GRAPHICS %s\n" pltg))
              (when (file-exists-p (format "../SCRIPTS-GRAPHICS/%s" pltg))
                (setq cst-graph nil)
                (save-window-excursion
                  ;; Check to see if last save was created by EsN.  If so, use the
                  ;; last save information.  If not, keep the customized information.
                  (set-buffer (find-file-noselect (format "../SCRIPTS-GRAPHICS/%s" pltg)))
                  (goto-char (point-min))
                  (setq cst-graph (not (re-search-forward "EsN" nil t)))
                  (kill-buffer (current-buffer)))
                (unless cst-graph
                  (delete-file (format "../SCRIPTS-GRAPHICS/%s" pltg))))
              (unless (file-exists-p (format "../SCRIPTS-GRAPHICS/%s" pltg))
                (with-temp-buffer
                  (insert graphics)
                  (unless (file-exists-p "../SCRIPTS-GRAPHICS" )
                    (make-directory "../SCRIPTS-GRAPHICS"))
                  (write-file (format "../SCRIPTS-GRAPHICS/%s" pltg)))))
            (cond
             ( (and esn-plt-gen-graphics (= esn-plt-exec-type 0))
               (insert "RUN NONMEM+GRAPHICS\n"))
             ( (= esn-plt-exec-type 1)
               (insert "RUN NONMEM ONLY\n"))
             ( (and esn-plt-gen-graphics (= esn-plt-exec-type 2))
               (insert "RUN GRAPHICS ONLY\n"))
             ( 't
               (insert "RUN NONMEM ONLY\n")))
            (when esn-plt-plta-quit
              (insert "QUIT\n"))
            (write-file plta)))
        (symbol-value 'plta)))))

(defvar esn-plt-timestamps-save nil
  "* Save PLT timestamps")

(make-variable-buffer-local 'esn-plt-timestamps-save)
(defun esn-plt-get-timestamps ()
  "Get a list of timestamps and their associated files."
  (let (
        (file "../.PLTToolsWorkFolder-DoNotDelete/PROJECTLOG.csv")
        (tmp '())
        (ret esn-plt-timestamps-save))
    (unless ret
      (when (file-exists-p file)
        (esn-message "File Exists:%s" file)
        (with-temp-buffer
          (insert-file-contents file)
          (goto-char (point-min))
          (delete-region (point-at-bol) (point-at-eol))
          (insert "(setq tmp '(")
          (while (re-search-forward "^\"" nil t)
            (replace-match "(\""))
          (goto-char (point-min))
          (while (re-search-forward "\"$" nil t)
            (replace-match "\")"))
          (goto-char (point-max))
          (insert "))")
          (goto-char (point-min))
          (while (re-search-forward "," nil t)
            (replace-match " "))
          (eval-buffer))
        (mapc (lambda(x)
                (if (not (assoc (nth 2 x) ret))
                    (add-to-list 'ret (list (nth 2 x) (list (nth 0 x))))
                  (setq ret (mapcar
                             (lambda(y)
                               (if (string= (nth 0 y) (nth 2 x))
                                   (list (nth 0 y) (append (nth 1 y) (list (nth 0 x))))
                                 y))
                             ret))))
              tmp)
        (setq esn-plt-timestamps-save ret)))
    (symbol-value 'ret)))

(defun esn-get-plta-name ()
  "Gets the PLTA name based onthe current buffer.

Assumes that if a control stream is in a working directory

Work-abcd

Then an automation file is placed in
Work-abcd-plta/

"
  (let ((buf (buffer-file-name)))
    (when buf
      (setq buf (concat (file-name-sans-extension buf) ".plta"))
      (when (string-match "\\(.*[Ww][Oo][Rr][Kk][^/\n\\]*\\)\\([/\\].*\\)" buf)
        (unless (file-exists-p (match-string 1 buf))
	  (make-directory (concat (match-string 1 buf) "-plta")))
	(setq buf (replace-match "\\1-plta\\2" t nil buf))))
    (symbol-value 'buf)))

(defun esn-plt-has-submitted-p ()
  "Have successfully run this file?"
  (esn-plt-find-timestamps))

(defun esn-plt-find-timestamps (&optional file-name)
  "Find Timestamps associated with current buffer or specified FILE-NAME."
  (if (not (esn-use-plt-p))
      '()
    (let ((buf (or file-name (buffer-file-name)))
          (timestamps '())
          (timestamp-vals (esn-plt-get-timestamps)))
      (when (string-match "[/]\\([^/]*$\\)" buf)
        (setq buf (match-string 1 buf)))
      (setq timestamps (assoc buf timestamp-vals))
      (when timestamps
        (setq timestamps (nth 1 timestamps)))
      (setq timestamps (reverse (sort timestamps 'string<)))
      (symbol-value 'timestamps))))

(require 'esn-tables)

(esn-deftable esn-plt-all-records
  :table-name "AllRecords.txt"
  :require-par-res t
  :require-par-iov t
  :require-pred t
  :require-sdtab t
  :require-other (esn-subset-regexp :tad t :occ t :sdtab t)
  :condition (and esn-plt-generate-tables (esn-use-plt-p))
  :group 'esn-plt-tables
  :add-id t)

;; First Records

;; From the PLT Tools manual:

;; The user is encouraged to create a second table in which the FIRSTONLY option
;; is selected.  This yields a table with only a single record per subject. This
;; table must be saved as a file and named FirstRecords.txt or FirstRecords. The
;; NOPRINT option must be selected.  Acceptable syntax for the table record is:

;; $TABLE [LIST OF COLUMNS FOR THE TABLE]
;; FIRSTONLY NOPRINT FILE=FirstRecords.txt ; or FirstRecords

;; The only mandatory column for this table is ID. Recommended records are all
;; post hoc parameters and all post hoc etas



(esn-deftable esn-plt-first-records
  :table-name "FirstRecords.txt"
  :table-options "NOPRINT FIRSTONLY"
  :require-population t
  :require-individual t
  :require-eta t
  :group 'esn-plt-tables
  :condition (and esn-plt-generate-tables (esn-use-plt-p))
  :add-id t)


(esn-deftable esn-plt-cwtab-deriv
  :table-name "cwtab.deriv"
  :table-options "NOPRINT ONEHEADER"
  :require-cwtab t
  :group 'esn-plt-tables
  :condition (and esn-plt-generate-tables (esn-use-plt-p))
  :add-extra '("IPRED" "MDV" "DV" "PRED" "RES")
  :add-id t)

(esn-deftable esn-plt-cwtab-deriv
  :table-name "cwtab.deriv"
  :table-options "NOPRINT ONEHEADER"
  :group 'esn-plt-tables
  :condition (and esn-plt-generate-tables (esn-use-plt-p))
  :add-id t)


;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Graphics Template
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun esn-plt-graphics-script-path ()
  "Returns the Graphics Script Path"
  (if (buffer-file-name)
      (concat
       (expand-file-name (concat (file-name-directory (buffer-file-name)) "../SCRIPTS-GRAPHICS")))
    ""))

(defalias 'e 'esn-plt-graphics)
(defun esn-plt-graphics (&optional a)
  "Creates a graphics script based on control stream values"
  (interactive)
  (require 'esn-units)
  (let* ((demo-alias '())
         (advan (or a (esn-advan)))
         (esn-var-names '())
         (num-cmt 1)
         (hl (esn-plt-hl advan 'num-cmt))
         (theta-names "")
         (esn-var-names '())
         (eta-names (esn-plt-eta (esn-plt-fix-labels (esn-get-variable-names "OME" "\\= *;+\\(.*\\)" ";+\\(.*\\)"))))
         (omega (esn-rec "OME" 't))
         (sigma (esn-rec "SIG" 't))
         (time (esn-get-time-units))
         (conc (esn-get-concentration-units))
         (vol (esn-get-volume-units))
         (dose (esn-get-dose-units))
         (inputs (esn-get-inputs))
         (data (expand-file-name (esn-get-data)))
         (header (esn-input-get-header data))
         (pltg (concat (file-name-directory (buffer-file-name)) "../SCRIPTS-GRAPHICS/"
                       (file-name-nondirectory (file-name-sans-extension (buffer-file-name))) ".pltg"))
         (i -1)
         (id -1)
         (id-alias "")
         (delim (progn
                  (mapc (lambda(x)
                          (setq i (+ i 1))
                          (if (string= x "ID")
                              (setq id i)))
                        inputs)
                  (flet ((get-delim (arg)
                                (let* ((hs (split-string header arg 't))
                                       (same (= (length hs) (length inputs))))
                                  (when same
                                    (setq id-alias (nth id hs)))
                                  same)))
                    (cond
                     ((get-delim ",") "Comma")
                     ((get-delim "\t") "Tab")
                     ((get-delim " ") "Space")))))
         (parms (esn-get-parameters :all t))
         parms-reg
         ca-covs id-covs fed-covs form-covs race-covs
         co-covs dose-group height-covs weigth-covs age-covs
         (ret nil))
    (setq parms (append parms inputs))
    (setq parms-reg (regexp-opt parms 'words))
    (flet ((get-cov (lst cov)
                    (mapc
                     (lambda(x)
                       (when (string-match parms-reg x)
                         (add-to-list lst x)))
                     cov)))
      (get-cov 'ca-covs esn-xpose-catab)
      (get-cov 'id-covs esn-xpose-ids)
      (get-cov 'age-covs esn-plt-age-covs)
      (get-cov 'weight-covs esn-plt-weight-covs)
      (get-cov 'height-covs esn-plt-height-covs)
      (get-cov 'dose-group esn-plt-gose-covs)
      (get-cov 'co-covs esn-xpose-cotab)
      (get-cov 'race-covs esn-plt-race-covs)
      (get-cov 'gender-covs esn-plt-gender-covs)
      (get-cov 'form-covs esn-plt-formulation-covs)
      (get-cov 'fed-covs esn-plt-fed-covs))
    ;;(error "%s,%s" parms ca-covs)
    (setq theta-names (esn-plt-theta (esn-plt-fix-labels (esn-get-variable-names "THE"  "\\= *;\\(.*\\)" ";\\(.*\\)"))
                                     num-cmt hl))
    (setq time (or time "hr"))
    (setq ret (esn-plt-graphics-script))
    (when nil
      
      ;; Check to make sure that the number of compartments is correctly assigned
      ;; for calculating half-life.  esn-plt-theta will set hl to the correct
      ;; value.
      
      ;; Deomgraphics
      
      (setq ret (esn-plt-covs ret 'inp demo-alias))
      (when (string-match "-BlackWhite-" ret)
        (setq ret (replace-match (if 't "Color" "Monochrome") 't 't ret)))
      (when (string-match "-GlobalHeader-" ret)
        (setq ret (replace-match "" 't 't ret)))
      (while (string-match "\n\n+" ret)
        (setq ret (replace-match "\n" 't 't ret))))
    ;; Write graphics script when this PLT run has not been submitted
    ;; OR there is no graphics script for the PLT tools run.
    (when (or (not (file-exists-p pltg))
              (and (file-exists-p pltg)
                   (not (esn-plt-has-submitted-p))))
      (with-temp-buffer
        (insert ret)
        (write-file pltg)))
    
    ;;(message "%s" ret)
    (symbol-value 'ret)))

(def-esn-project-update esn-plt-graphics-project
  :apply-function esn-plt-graphics
  :message "EsN PLT graphics scripts update")

(def-esn-template esn-plt-graphics-script
  "PLT Graphics Script template"
  :content "######################################################################
# PLTTools Graphics Script
# Program Version 3.3.1 build 2449 EsN $esn-mode-ver
# Saved %Y-%m-%d %H:%M:%S
# Path $esn-plt-graphics-script-path
######################################################################
# INITIAL SETUP
####################
# Calculate Half Lives
####################
$hl
####################
# THETAS
####################
$theta-names
THETASCREEN      <- c()
####################
# ETAS
####################
$eta-names
USECORRESPONDING         <- c()
####################
# SIGMAS
####################
SIGMANUMBER      <- c(\"\")
SIGMANAME        <- c(\"\")
####################
# COVARIATES
####################
COVARColNames    <- c(\"\")
COVARNONMEM      <- c(\"\")
COVARDescriptors         <- c(\"\")
COVARType        <- c(\"\")
COVARGLM  <- c(F)
####################
# DemoFile% %
####################
DEMOEXISTS     <- c(T)
IDALIAS        <- c(\"$id-alias\")
DEMOFILENAME      <- c(\"$data\")
DEMODELIMITER     <- c(\"$delim\")
####################
# Select Graphics
####################
BySubjectGraphics        <- c(T)
SpaghettiGraphics        <- c(T)
ETAdomain        <- c(T)
expETAdomain     <- c(T)
PostHocDomain    <- c(T)
ETAvsETA         <- c(T)
LogLogCp         <- c(T)
LinearLinearCp   <- c(T)
ResidualsCp      <- c(T)
####################
# Additional Options
####################
CalculateStatistics      <- c(T)
DisplayOutlierIDs        <- c(T)
StratifyCovariate        <- c(T)
####################
# Graphics Options
####################
BlackWhite       <- c(\"Color\")
GlobalHeader     <- c(\"\")
####################
# Units
####################
AMTunit           <- c(\"$dose\")
TIMEUnitsTABLE    <- c(\"$time\")
TIMEUnitsGRAPHICS <- c(\"$time\")
####################
# Scaling
####################
IDCorrection     <- c(\"\")
DVconversion     <- c(1)
AMTconversion    <- c(1)
####################
# Number of Dependent Variables
####################
NumberofDependentVariables       <- c(\"1\")
####################
# Single DV
####################
LOQ      <- c(\"\")
DVUnits  <- c(\"\")
####################
# Multiple DVs (optional)
####################
IndicatorColumn  <- c(\"\")
FlagValues       <- c()
DVNames  <- c()
LOQValues        <- c()
MultipleDVUnits  <- c()
####################
# By-Subject Graphics
####################
BySubject01      <- list(\"\", \"\", \"\", \"\", \"Linear Only\", F, \"\")
####################
# Options
####################
####################
# Options
####################
BySubjectRows    <- c(2)
DosesTextField   <- c(T)
LabelDoseOptions         <- c(\"At All Doses\")
####################
# Race (optional)
####################
RaceCodes        <- c(\"\")
RaceText         <- c(\"\")
####################
# Gender (optional)
####################
GenderCodes      <- c(\"\")
GenderText       <- c(\"\")
####################
# By-Subject Grouping Variable
####################
BySubjectGroupCodes      <- c(\"\")
BySubjectGroupText       <- c(\"\")
####################
# By-Subject Grouping
####################
BySubjectGroupVariable   <- c(\"\")
BySubjectGroupLabel      <- c(\"\")
####################
# By-Subject MultiplePeriods
####################
BySubjectPeriodVariable  <- c(\"\")
BySubjectPeriodLabel     <- c(\"\")
####################
# Spaghetti Graphics
####################
Spaghetti01      <- list(\"\", \"\",\"\", \"Ratio\", \"Wide\", \"\")
####################
# Display Formulation (optional)
####################
FormulationStatusName    <- c(\"\")
DisplayFormulationCodes  <- c(\"\")
DisplayFormulationText   <- c(\"\")
####################
# Display Fed Status (optional)
####################
FedStatusName    <- c(\"\")
DisplayFedCodes  <- c(\"\")
DisplayFedText   <- c(\"\")
####################
# Spaghetti Grouping
####################
SpaghettiGroupVariable   <- c(\"\")
SpaghettiGroupLabel      <- c(\"\")
####################
# Spaghetti Grouping Variable
####################
SpaghettiGroupCodes      <- c(\"\")
SpaghettiGroupText       <- c(\"\")
####################
# Spaghetti MultiplePeriods
####################
SpaghettiPeriodVariable  <- c(\"\")
SpaghettiPeriodLabel     <- c(\"\")
####################
# Grouping 3
####################
Group3Variable   <- c(\"\")
Group3Label      <- c(\"\")
####################
# Grouping Variable 3
####################
Group3Codes      <- c(\"\")
Group3Text       <- c(\"\")
####################
# MultiplePeriods 3
####################
Group3PeriodVariable     <- c(\"\")
Group3PeriodLabel        <- c(\"\")
########################################
# PLTsoft END
########################################
"
  :group 'esn-plt-templates)



(provide 'esn-plt)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; esn-plt.el ends here
